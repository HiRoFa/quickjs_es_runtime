(function() {
    var type_impls = Object.fromEntries([["swc_allocator",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-HashSet%3CT,+S,+A%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/hashbrown/set.rs.html#119\">Source</a><a href=\"#impl-Clone-for-HashSet%3CT,+S,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, S, A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for <a class=\"struct\" href=\"hashbrown/set/struct.HashSet.html\" title=\"struct hashbrown::set::HashSet\">HashSet</a>&lt;T, S, A&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,\n    S: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,\n    A: <a class=\"trait\" href=\"allocator_api2/stable/alloc/trait.Allocator.html\" title=\"trait allocator_api2::stable::alloc::Allocator\">Allocator</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/hashbrown/set.rs.html#120\">Source</a><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.89.0/core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; <a class=\"struct\" href=\"hashbrown/set/struct.HashSet.html\" title=\"struct hashbrown::set::HashSet\">HashSet</a>&lt;T, S, A&gt;</h4></section></summary><div class='docblock'>Returns a duplicate of the value. <a href=\"https://doc.rust-lang.org/1.89.0/core/clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/hashbrown/set.rs.html#126\">Source</a><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.89.0/core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: &amp;<a class=\"struct\" href=\"hashbrown/set/struct.HashSet.html\" title=\"struct hashbrown::set::HashSet\">HashSet</a>&lt;T, S, A&gt;)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"https://doc.rust-lang.org/1.89.0/core/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","swc_allocator::api::arena::HashSet","swc_allocator::api::scoped::HashSet","swc_allocator::api::global::HashSet"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-HashSet%3CT,+S,+A%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/hashbrown/set.rs.html#1293-1296\">Source</a><a href=\"#impl-Debug-for-HashSet%3CT,+S,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, S, A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"hashbrown/set/struct.HashSet.html\" title=\"struct hashbrown::set::HashSet\">HashSet</a>&lt;T, S, A&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a>,\n    A: <a class=\"trait\" href=\"allocator_api2/stable/alloc/trait.Allocator.html\" title=\"trait allocator_api2::stable::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/hashbrown/set.rs.html#1298\">Source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.89.0/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.89.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.89.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.89.0/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.89.0/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","swc_allocator::api::arena::HashSet","swc_allocator::api::scoped::HashSet","swc_allocator::api::global::HashSet"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Default-for-HashSet%3CT,+S,+A%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/hashbrown/set.rs.html#1395-1398\">Source</a><a href=\"#impl-Default-for-HashSet%3CT,+S,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, S, A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a> for <a class=\"struct\" href=\"hashbrown/set/struct.HashSet.html\" title=\"struct hashbrown::set::HashSet\">HashSet</a>&lt;T, S, A&gt;<div class=\"where\">where\n    S: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a>,\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a> + <a class=\"trait\" href=\"allocator_api2/stable/alloc/trait.Allocator.html\" title=\"trait allocator_api2::stable::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/hashbrown/set.rs.html#1402\">Source</a><a href=\"#method.default\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.89.0/core/default/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; <a class=\"struct\" href=\"hashbrown/set/struct.HashSet.html\" title=\"struct hashbrown::set::HashSet\">HashSet</a>&lt;T, S, A&gt;</h4></section></summary><div class=\"docblock\"><p>Creates an empty <code>HashSet&lt;T, S&gt;</code> with the <code>Default</code> value for the hasher.</p>\n</div></details></div></details>","Default","swc_allocator::api::arena::HashSet","swc_allocator::api::scoped::HashSet","swc_allocator::api::global::HashSet"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Extend%3C%26T%3E-for-HashSet%3CT,+S,+A%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/hashbrown/set.rs.html#1371-1375\">Source</a><a href=\"#impl-Extend%3C%26T%3E-for-HashSet%3CT,+S,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, T, S, A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/iter/traits/collect/trait.Extend.html\" title=\"trait core::iter::traits::collect::Extend\">Extend</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/std/primitive.reference.html\">&amp;'a T</a>&gt; for <a class=\"struct\" href=\"hashbrown/set/struct.HashSet.html\" title=\"struct hashbrown::set::HashSet\">HashSet</a>&lt;T, S, A&gt;<div class=\"where\">where\n    T: 'a + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a>,\n    S: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/hash/trait.BuildHasher.html\" title=\"trait core::hash::BuildHasher\">BuildHasher</a>,\n    A: <a class=\"trait\" href=\"allocator_api2/stable/alloc/trait.Allocator.html\" title=\"trait allocator_api2::stable::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/hashbrown/set.rs.html#1378\">Source</a><a href=\"#method.extend\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.89.0/core/iter/traits/collect/trait.Extend.html#tymethod.extend\" class=\"fn\">extend</a>&lt;I&gt;(&amp;mut self, iter: I)<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/std/primitive.reference.html\">&amp;'a T</a>&gt;,</div></h4></section></summary><div class='docblock'>Extends a collection with the contents of an iterator. <a href=\"https://doc.rust-lang.org/1.89.0/core/iter/traits/collect/trait.Extend.html#tymethod.extend\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_one\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.89.0/src/core/iter/traits/collect.rs.html#417\">Source</a><a href=\"#method.extend_one\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.89.0/core/iter/traits/collect/trait.Extend.html#method.extend_one\" class=\"fn\">extend_one</a>(&amp;mut self, item: A)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>extend_one</code>)</span></div></span><div class='docblock'>Extends a collection with exactly one element.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_reserve\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.89.0/src/core/iter/traits/collect.rs.html#425\">Source</a><a href=\"#method.extend_reserve\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.89.0/core/iter/traits/collect/trait.Extend.html#method.extend_reserve\" class=\"fn\">extend_reserve</a>(&amp;mut self, additional: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/std/primitive.usize.html\">usize</a>)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>extend_one</code>)</span></div></span><div class='docblock'>Reserves capacity in a collection for the given number of additional elements. <a href=\"https://doc.rust-lang.org/1.89.0/core/iter/traits/collect/trait.Extend.html#method.extend_reserve\">Read more</a></div></details></div></details>","Extend<&'a T>","swc_allocator::api::arena::HashSet","swc_allocator::api::scoped::HashSet","swc_allocator::api::global::HashSet"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Extend%3CT%3E-for-HashSet%3CT,+S,+A%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/hashbrown/set.rs.html#1347-1351\">Source</a><a href=\"#impl-Extend%3CT%3E-for-HashSet%3CT,+S,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, S, A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/iter/traits/collect/trait.Extend.html\" title=\"trait core::iter::traits::collect::Extend\">Extend</a>&lt;T&gt; for <a class=\"struct\" href=\"hashbrown/set/struct.HashSet.html\" title=\"struct hashbrown::set::HashSet\">HashSet</a>&lt;T, S, A&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a>,\n    S: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/hash/trait.BuildHasher.html\" title=\"trait core::hash::BuildHasher\">BuildHasher</a>,\n    A: <a class=\"trait\" href=\"allocator_api2/stable/alloc/trait.Allocator.html\" title=\"trait allocator_api2::stable::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/hashbrown/set.rs.html#1354\">Source</a><a href=\"#method.extend\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.89.0/core/iter/traits/collect/trait.Extend.html#tymethod.extend\" class=\"fn\">extend</a>&lt;I&gt;(&amp;mut self, iter: I)<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = T&gt;,</div></h4></section></summary><div class='docblock'>Extends a collection with the contents of an iterator. <a href=\"https://doc.rust-lang.org/1.89.0/core/iter/traits/collect/trait.Extend.html#tymethod.extend\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_one\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.89.0/src/core/iter/traits/collect.rs.html#417\">Source</a><a href=\"#method.extend_one\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.89.0/core/iter/traits/collect/trait.Extend.html#method.extend_one\" class=\"fn\">extend_one</a>(&amp;mut self, item: A)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>extend_one</code>)</span></div></span><div class='docblock'>Extends a collection with exactly one element.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_reserve\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.89.0/src/core/iter/traits/collect.rs.html#425\">Source</a><a href=\"#method.extend_reserve\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.89.0/core/iter/traits/collect/trait.Extend.html#method.extend_reserve\" class=\"fn\">extend_reserve</a>(&amp;mut self, additional: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/std/primitive.usize.html\">usize</a>)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>extend_one</code>)</span></div></span><div class='docblock'>Reserves capacity in a collection for the given number of additional elements. <a href=\"https://doc.rust-lang.org/1.89.0/core/iter/traits/collect/trait.Extend.html#method.extend_reserve\">Read more</a></div></details></div></details>","Extend<T>","swc_allocator::api::arena::HashSet","swc_allocator::api::scoped::HashSet","swc_allocator::api::global::HashSet"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3C%5BT;+N%5D%3E-for-HashSet%3CT,+BuildHasherDefault%3CAHasher%3E,+A%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/hashbrown/set.rs.html#1328-1331\">Source</a><a href=\"#impl-From%3C%5BT;+N%5D%3E-for-HashSet%3CT,+BuildHasherDefault%3CAHasher%3E,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A, const N: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/std/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/std/primitive.array.html\">[T; N]</a>&gt; for <a class=\"struct\" href=\"hashbrown/set/struct.HashSet.html\" title=\"struct hashbrown::set::HashSet\">HashSet</a>&lt;T, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.89.0/core/hash/struct.BuildHasherDefault.html\" title=\"struct core::hash::BuildHasherDefault\">BuildHasherDefault</a>&lt;<a class=\"struct\" href=\"ahash/fallback_hash/struct.AHasher.html\" title=\"struct ahash::fallback_hash::AHasher\">AHasher</a>&gt;, A&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a>,\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a> + <a class=\"trait\" href=\"allocator_api2/stable/alloc/trait.Allocator.html\" title=\"trait allocator_api2::stable::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/hashbrown/set.rs.html#1342\">Source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.89.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(arr: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/std/primitive.array.html\">[T; N]</a>) -&gt; <a class=\"struct\" href=\"hashbrown/set/struct.HashSet.html\" title=\"struct hashbrown::set::HashSet\">HashSet</a>&lt;T, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.89.0/core/hash/struct.BuildHasherDefault.html\" title=\"struct core::hash::BuildHasherDefault\">BuildHasherDefault</a>&lt;<a class=\"struct\" href=\"ahash/fallback_hash/struct.AHasher.html\" title=\"struct ahash::fallback_hash::AHasher\">AHasher</a>&gt;, A&gt;</h4></section></summary><div class=\"docblock\"><h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>hashbrown::HashSet;\n\n<span class=\"kw\">let </span>set1 = HashSet::from([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]);\n<span class=\"kw\">let </span>set2: HashSet&lt;<span class=\"kw\">_</span>&gt; = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>].into();\n<span class=\"macro\">assert_eq!</span>(set1, set2);</code></pre></div>\n</div></details></div></details>","From<[T; N]>","swc_allocator::api::arena::HashSet","swc_allocator::api::scoped::HashSet","swc_allocator::api::global::HashSet"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CHashMap%3CT,+(),+S,+A%3E%3E-for-HashSet%3CT,+S,+A%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/hashbrown/set.rs.html#1303-1305\">Source</a><a href=\"#impl-From%3CHashMap%3CT,+(),+S,+A%3E%3E-for-HashSet%3CT,+S,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, S, A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"struct\" href=\"hashbrown/map/struct.HashMap.html\" title=\"struct hashbrown::map::HashMap\">HashMap</a>&lt;T, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/std/primitive.unit.html\">()</a>, S, A&gt;&gt; for <a class=\"struct\" href=\"hashbrown/set/struct.HashSet.html\" title=\"struct hashbrown::set::HashSet\">HashSet</a>&lt;T, S, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"allocator_api2/stable/alloc/trait.Allocator.html\" title=\"trait allocator_api2::stable::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/hashbrown/set.rs.html#1307\">Source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.89.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(map: <a class=\"struct\" href=\"hashbrown/map/struct.HashMap.html\" title=\"struct hashbrown::map::HashMap\">HashMap</a>&lt;T, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/std/primitive.unit.html\">()</a>, S, A&gt;) -&gt; <a class=\"struct\" href=\"hashbrown/set/struct.HashSet.html\" title=\"struct hashbrown::set::HashSet\">HashSet</a>&lt;T, S, A&gt;</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<HashMap<T, (), S, A>>","swc_allocator::api::arena::HashSet","swc_allocator::api::scoped::HashSet","swc_allocator::api::global::HashSet"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromIterator%3CT%3E-for-HashSet%3CT,+S,+A%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/hashbrown/set.rs.html#1312-1316\">Source</a><a href=\"#impl-FromIterator%3CT%3E-for-HashSet%3CT,+S,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, S, A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/iter/traits/collect/trait.FromIterator.html\" title=\"trait core::iter::traits::collect::FromIterator\">FromIterator</a>&lt;T&gt; for <a class=\"struct\" href=\"hashbrown/set/struct.HashSet.html\" title=\"struct hashbrown::set::HashSet\">HashSet</a>&lt;T, S, A&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a>,\n    S: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/hash/trait.BuildHasher.html\" title=\"trait core::hash::BuildHasher\">BuildHasher</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a>,\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a> + <a class=\"trait\" href=\"allocator_api2/stable/alloc/trait.Allocator.html\" title=\"trait allocator_api2::stable::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_iter\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/hashbrown/set.rs.html#1319\">Source</a><a href=\"#method.from_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.89.0/core/iter/traits/collect/trait.FromIterator.html#tymethod.from_iter\" class=\"fn\">from_iter</a>&lt;I&gt;(iter: I) -&gt; <a class=\"struct\" href=\"hashbrown/set/struct.HashSet.html\" title=\"struct hashbrown::set::HashSet\">HashSet</a>&lt;T, S, A&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = T&gt;,</div></h4></section></summary><div class='docblock'>Creates a value from an iterator. <a href=\"https://doc.rust-lang.org/1.89.0/core/iter/traits/collect/trait.FromIterator.html#tymethod.from_iter\">Read more</a></div></details></div></details>","FromIterator<T>","swc_allocator::api::arena::HashSet","swc_allocator::api::scoped::HashSet","swc_allocator::api::global::HashSet"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-HashSet%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/hashbrown/set.rs.html#132\">Source</a><a href=\"#impl-HashSet%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"struct\" href=\"hashbrown/set/struct.HashSet.html\" title=\"struct hashbrown::set::HashSet\">HashSet</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new\" class=\"method\"><a class=\"src rightside\" href=\"src/hashbrown/set.rs.html#157\">Source</a><h4 class=\"code-header\">pub fn <a href=\"hashbrown/set/struct.HashSet.html#tymethod.new\" class=\"fn\">new</a>() -&gt; <a class=\"struct\" href=\"hashbrown/set/struct.HashSet.html\" title=\"struct hashbrown::set::HashSet\">HashSet</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Creates an empty <code>HashSet</code>.</p>\n<p>The hash set is initially created with a capacity of 0, so it will not allocate until it\nis first inserted into.</p>\n<h5 id=\"hashdos-resistance\"><a class=\"doc-anchor\" href=\"#hashdos-resistance\">§</a>HashDoS resistance</h5>\n<p>The <code>hash_builder</code> normally use a fixed key by default and that does\nnot allow the <code>HashSet</code> to be protected against attacks such as <a href=\"https://en.wikipedia.org/wiki/Collision_attack\"><code>HashDoS</code></a>.\nUsers who require HashDoS resistance should explicitly use\n<a href=\"ahash/random_state/struct.RandomState.html\" title=\"struct ahash::random_state::RandomState\"><code>ahash::RandomState</code></a> or <a href=\"https://doc.rust-lang.org/std/collections/hash_map/struct.RandomState.html\"><code>std::collections::hash_map::RandomState</code></a>\nas the hasher when creating a <a href=\"hashbrown/set/struct.HashSet.html\" title=\"struct hashbrown::set::HashSet\"><code>HashSet</code></a>, for example with\n<a href=\"hashbrown/set/struct.HashSet.html#method.with_hasher\" title=\"associated function hashbrown::set::HashSet::with_hasher\"><code>with_hasher</code></a> method.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>hashbrown::HashSet;\n<span class=\"kw\">let </span>set: HashSet&lt;i32&gt; = HashSet::new();</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.with_capacity\" class=\"method\"><a class=\"src rightside\" href=\"src/hashbrown/set.rs.html#188\">Source</a><h4 class=\"code-header\">pub fn <a href=\"hashbrown/set/struct.HashSet.html#tymethod.with_capacity\" class=\"fn\">with_capacity</a>(capacity: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"struct\" href=\"hashbrown/set/struct.HashSet.html\" title=\"struct hashbrown::set::HashSet\">HashSet</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Creates an empty <code>HashSet</code> with the specified capacity.</p>\n<p>The hash set will be able to hold at least <code>capacity</code> elements without\nreallocating. If <code>capacity</code> is 0, the hash set will not allocate.</p>\n<h5 id=\"hashdos-resistance-1\"><a class=\"doc-anchor\" href=\"#hashdos-resistance-1\">§</a>HashDoS resistance</h5>\n<p>The <code>hash_builder</code> normally use a fixed key by default and that does\nnot allow the <code>HashSet</code> to be protected against attacks such as <a href=\"https://en.wikipedia.org/wiki/Collision_attack\"><code>HashDoS</code></a>.\nUsers who require HashDoS resistance should explicitly use\n<a href=\"ahash/random_state/struct.RandomState.html\" title=\"struct ahash::random_state::RandomState\"><code>ahash::RandomState</code></a> or <a href=\"https://doc.rust-lang.org/std/collections/hash_map/struct.RandomState.html\"><code>std::collections::hash_map::RandomState</code></a>\nas the hasher when creating a <a href=\"hashbrown/set/struct.HashSet.html\" title=\"struct hashbrown::set::HashSet\"><code>HashSet</code></a>, for example with\n<a href=\"hashbrown/set/struct.HashSet.html#method.with_capacity_and_hasher\" title=\"associated function hashbrown::set::HashSet::with_capacity_and_hasher\"><code>with_capacity_and_hasher</code></a> method.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>hashbrown::HashSet;\n<span class=\"kw\">let </span>set: HashSet&lt;i32&gt; = HashSet::with_capacity(<span class=\"number\">10</span>);\n<span class=\"macro\">assert!</span>(set.capacity() &gt;= <span class=\"number\">10</span>);</code></pre></div>\n</div></details></div></details>",0,"swc_allocator::api::global::HashSet"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-HashSet%3CT,+BuildHasherDefault%3CAHasher%3E,+A%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/hashbrown/set.rs.html#196\">Source</a><a href=\"#impl-HashSet%3CT,+BuildHasherDefault%3CAHasher%3E,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"struct\" href=\"hashbrown/set/struct.HashSet.html\" title=\"struct hashbrown::set::HashSet\">HashSet</a>&lt;T, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.89.0/core/hash/struct.BuildHasherDefault.html\" title=\"struct core::hash::BuildHasherDefault\">BuildHasherDefault</a>&lt;<a class=\"struct\" href=\"ahash/fallback_hash/struct.AHasher.html\" title=\"struct ahash::fallback_hash::AHasher\">AHasher</a>&gt;, A&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a>,\n    A: <a class=\"trait\" href=\"allocator_api2/stable/alloc/trait.Allocator.html\" title=\"trait allocator_api2::stable::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new_in\" class=\"method\"><a class=\"src rightside\" href=\"src/hashbrown/set.rs.html#221\">Source</a><h4 class=\"code-header\">pub fn <a href=\"hashbrown/set/struct.HashSet.html#tymethod.new_in\" class=\"fn\">new_in</a>(alloc: A) -&gt; <a class=\"struct\" href=\"hashbrown/set/struct.HashSet.html\" title=\"struct hashbrown::set::HashSet\">HashSet</a>&lt;T, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.89.0/core/hash/struct.BuildHasherDefault.html\" title=\"struct core::hash::BuildHasherDefault\">BuildHasherDefault</a>&lt;<a class=\"struct\" href=\"ahash/fallback_hash/struct.AHasher.html\" title=\"struct ahash::fallback_hash::AHasher\">AHasher</a>&gt;, A&gt;</h4></section></summary><div class=\"docblock\"><p>Creates an empty <code>HashSet</code>.</p>\n<p>The hash set is initially created with a capacity of 0, so it will not allocate until it\nis first inserted into.</p>\n<h5 id=\"hashdos-resistance\"><a class=\"doc-anchor\" href=\"#hashdos-resistance\">§</a>HashDoS resistance</h5>\n<p>The <code>hash_builder</code> normally use a fixed key by default and that does\nnot allow the <code>HashSet</code> to be protected against attacks such as <a href=\"https://en.wikipedia.org/wiki/Collision_attack\"><code>HashDoS</code></a>.\nUsers who require HashDoS resistance should explicitly use\n<a href=\"ahash/random_state/struct.RandomState.html\" title=\"struct ahash::random_state::RandomState\"><code>ahash::RandomState</code></a> or <a href=\"https://doc.rust-lang.org/std/collections/hash_map/struct.RandomState.html\"><code>std::collections::hash_map::RandomState</code></a>\nas the hasher when creating a <a href=\"hashbrown/set/struct.HashSet.html\" title=\"struct hashbrown::set::HashSet\"><code>HashSet</code></a>, for example with\n<a href=\"hashbrown/set/struct.HashSet.html#method.with_hasher_in\" title=\"associated function hashbrown::set::HashSet::with_hasher_in\"><code>with_hasher_in</code></a> method.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>hashbrown::HashSet;\n<span class=\"kw\">let </span>set: HashSet&lt;i32&gt; = HashSet::new();</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.with_capacity_in\" class=\"method\"><a class=\"src rightside\" href=\"src/hashbrown/set.rs.html#252\">Source</a><h4 class=\"code-header\">pub fn <a href=\"hashbrown/set/struct.HashSet.html#tymethod.with_capacity_in\" class=\"fn\">with_capacity_in</a>(\n    capacity: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/std/primitive.usize.html\">usize</a>,\n    alloc: A,\n) -&gt; <a class=\"struct\" href=\"hashbrown/set/struct.HashSet.html\" title=\"struct hashbrown::set::HashSet\">HashSet</a>&lt;T, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.89.0/core/hash/struct.BuildHasherDefault.html\" title=\"struct core::hash::BuildHasherDefault\">BuildHasherDefault</a>&lt;<a class=\"struct\" href=\"ahash/fallback_hash/struct.AHasher.html\" title=\"struct ahash::fallback_hash::AHasher\">AHasher</a>&gt;, A&gt;</h4></section></summary><div class=\"docblock\"><p>Creates an empty <code>HashSet</code> with the specified capacity.</p>\n<p>The hash set will be able to hold at least <code>capacity</code> elements without\nreallocating. If <code>capacity</code> is 0, the hash set will not allocate.</p>\n<h5 id=\"hashdos-resistance-1\"><a class=\"doc-anchor\" href=\"#hashdos-resistance-1\">§</a>HashDoS resistance</h5>\n<p>The <code>hash_builder</code> normally use a fixed key by default and that does\nnot allow the <code>HashSet</code> to be protected against attacks such as <a href=\"https://en.wikipedia.org/wiki/Collision_attack\"><code>HashDoS</code></a>.\nUsers who require HashDoS resistance should explicitly use\n<a href=\"ahash/random_state/struct.RandomState.html\" title=\"struct ahash::random_state::RandomState\"><code>ahash::RandomState</code></a> or <a href=\"https://doc.rust-lang.org/std/collections/hash_map/struct.RandomState.html\"><code>std::collections::hash_map::RandomState</code></a>\nas the hasher when creating a <a href=\"hashbrown/set/struct.HashSet.html\" title=\"struct hashbrown::set::HashSet\"><code>HashSet</code></a>, for example with\n<a href=\"hashbrown/set/struct.HashSet.html#method.with_capacity_and_hasher_in\" title=\"associated function hashbrown::set::HashSet::with_capacity_and_hasher_in\"><code>with_capacity_and_hasher_in</code></a> method.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>hashbrown::HashSet;\n<span class=\"kw\">let </span>set: HashSet&lt;i32&gt; = HashSet::with_capacity(<span class=\"number\">10</span>);\n<span class=\"macro\">assert!</span>(set.capacity() &gt;= <span class=\"number\">10</span>);</code></pre></div>\n</div></details></div></details>",0,"swc_allocator::api::arena::HashSet","swc_allocator::api::scoped::HashSet","swc_allocator::api::global::HashSet"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-HashSet%3CT,+S%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/hashbrown/set.rs.html#436\">Source</a><a href=\"#impl-HashSet%3CT,+S%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, S&gt; <a class=\"struct\" href=\"hashbrown/set/struct.HashSet.html\" title=\"struct hashbrown::set::HashSet\">HashSet</a>&lt;T, S&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.with_hasher\" class=\"method\"><a class=\"src rightside\" href=\"src/hashbrown/set.rs.html#469\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"hashbrown/set/struct.HashSet.html#tymethod.with_hasher\" class=\"fn\">with_hasher</a>(hasher: S) -&gt; <a class=\"struct\" href=\"hashbrown/set/struct.HashSet.html\" title=\"struct hashbrown::set::HashSet\">HashSet</a>&lt;T, S&gt;</h4></section></summary><div class=\"docblock\"><p>Creates a new empty hash set which will use the given hasher to hash\nkeys.</p>\n<p>The hash set is initially created with a capacity of 0, so it will not\nallocate until it is first inserted into.</p>\n<h5 id=\"hashdos-resistance\"><a class=\"doc-anchor\" href=\"#hashdos-resistance\">§</a>HashDoS resistance</h5>\n<p>The <code>hash_builder</code> normally use a fixed key by default and that does\nnot allow the <code>HashSet</code> to be protected against attacks such as <a href=\"https://en.wikipedia.org/wiki/Collision_attack\"><code>HashDoS</code></a>.\nUsers who require HashDoS resistance should explicitly use\n<a href=\"ahash/random_state/struct.RandomState.html\" title=\"struct ahash::random_state::RandomState\"><code>ahash::RandomState</code></a> or <a href=\"https://doc.rust-lang.org/std/collections/hash_map/struct.RandomState.html\"><code>std::collections::hash_map::RandomState</code></a>\nas the hasher when creating a <a href=\"hashbrown/set/struct.HashSet.html\" title=\"struct hashbrown::set::HashSet\"><code>HashSet</code></a>.</p>\n<p>The <code>hash_builder</code> passed should implement the <a href=\"https://doc.rust-lang.org/std/hash/trait.BuildHasher.html\"><code>BuildHasher</code></a> trait for\nthe HashSet to be useful, see its documentation for details.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>hashbrown::HashSet;\n<span class=\"kw\">use </span>hashbrown::hash_map::DefaultHashBuilder;\n\n<span class=\"kw\">let </span>s = DefaultHashBuilder::default();\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>set = HashSet::with_hasher(s);\nset.insert(<span class=\"number\">2</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.with_capacity_and_hasher\" class=\"method\"><a class=\"src rightside\" href=\"src/hashbrown/set.rs.html#507\">Source</a><h4 class=\"code-header\">pub fn <a href=\"hashbrown/set/struct.HashSet.html#tymethod.with_capacity_and_hasher\" class=\"fn\">with_capacity_and_hasher</a>(capacity: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/std/primitive.usize.html\">usize</a>, hasher: S) -&gt; <a class=\"struct\" href=\"hashbrown/set/struct.HashSet.html\" title=\"struct hashbrown::set::HashSet\">HashSet</a>&lt;T, S&gt;</h4></section></summary><div class=\"docblock\"><p>Creates an empty <code>HashSet</code> with the specified capacity, using\n<code>hasher</code> to hash the keys.</p>\n<p>The hash set will be able to hold at least <code>capacity</code> elements without\nreallocating. If <code>capacity</code> is 0, the hash set will not allocate.</p>\n<h5 id=\"hashdos-resistance-1\"><a class=\"doc-anchor\" href=\"#hashdos-resistance-1\">§</a>HashDoS resistance</h5>\n<p>The <code>hash_builder</code> normally use a fixed key by default and that does\nnot allow the <code>HashSet</code> to be protected against attacks such as <a href=\"https://en.wikipedia.org/wiki/Collision_attack\"><code>HashDoS</code></a>.\nUsers who require HashDoS resistance should explicitly use\n<a href=\"ahash/random_state/struct.RandomState.html\" title=\"struct ahash::random_state::RandomState\"><code>ahash::RandomState</code></a> or <a href=\"https://doc.rust-lang.org/std/collections/hash_map/struct.RandomState.html\"><code>std::collections::hash_map::RandomState</code></a>\nas the hasher when creating a <a href=\"hashbrown/set/struct.HashSet.html\" title=\"struct hashbrown::set::HashSet\"><code>HashSet</code></a>.</p>\n<p>The <code>hash_builder</code> passed should implement the <a href=\"https://doc.rust-lang.org/std/hash/trait.BuildHasher.html\"><code>BuildHasher</code></a> trait for\nthe HashSet to be useful, see its documentation for details.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>hashbrown::HashSet;\n<span class=\"kw\">use </span>hashbrown::hash_map::DefaultHashBuilder;\n\n<span class=\"kw\">let </span>s = DefaultHashBuilder::default();\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>set = HashSet::with_capacity_and_hasher(<span class=\"number\">10</span>, s);\nset.insert(<span class=\"number\">1</span>);</code></pre></div>\n</div></details></div></details>",0,"swc_allocator::api::global::HashSet"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-HashSet%3CT,+S,+A%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/hashbrown/set.rs.html#259\">Source</a><a href=\"#impl-HashSet%3CT,+S,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, S, A&gt; <a class=\"struct\" href=\"hashbrown/set/struct.HashSet.html\" title=\"struct hashbrown::set::HashSet\">HashSet</a>&lt;T, S, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"allocator_api2/stable/alloc/trait.Allocator.html\" title=\"trait allocator_api2::stable::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.capacity\" class=\"method\"><a class=\"src rightside\" href=\"src/hashbrown/set.rs.html#270\">Source</a><h4 class=\"code-header\">pub fn <a href=\"hashbrown/set/struct.HashSet.html#tymethod.capacity\" class=\"fn\">capacity</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/std/primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of elements the set can hold without reallocating.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>hashbrown::HashSet;\n<span class=\"kw\">let </span>set: HashSet&lt;i32&gt; = HashSet::with_capacity(<span class=\"number\">100</span>);\n<span class=\"macro\">assert!</span>(set.capacity() &gt;= <span class=\"number\">100</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.iter\" class=\"method\"><a class=\"src rightside\" href=\"src/hashbrown/set.rs.html#291\">Source</a><h4 class=\"code-header\">pub fn <a href=\"hashbrown/set/struct.HashSet.html#tymethod.iter\" class=\"fn\">iter</a>(&amp;self) -&gt; <a class=\"struct\" href=\"hashbrown/set/struct.Iter.html\" title=\"struct hashbrown::set::Iter\">Iter</a>&lt;'_, T&gt;</h4></section></summary><div class=\"docblock\"><p>An iterator visiting all elements in arbitrary order.\nThe iterator element type is <code>&amp;'a T</code>.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>hashbrown::HashSet;\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>set = HashSet::new();\nset.insert(<span class=\"string\">\"a\"</span>);\nset.insert(<span class=\"string\">\"b\"</span>);\n\n<span class=\"comment\">// Will print in an arbitrary order.\n</span><span class=\"kw\">for </span>x <span class=\"kw\">in </span>set.iter() {\n    <span class=\"macro\">println!</span>(<span class=\"string\">\"{}\"</span>, x);\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.len\" class=\"method\"><a class=\"src rightside\" href=\"src/hashbrown/set.rs.html#310\">Source</a><h4 class=\"code-header\">pub fn <a href=\"hashbrown/set/struct.HashSet.html#tymethod.len\" class=\"fn\">len</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/std/primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of elements in the set.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>hashbrown::HashSet;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = HashSet::new();\n<span class=\"macro\">assert_eq!</span>(v.len(), <span class=\"number\">0</span>);\nv.insert(<span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(v.len(), <span class=\"number\">1</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_empty\" class=\"method\"><a class=\"src rightside\" href=\"src/hashbrown/set.rs.html#327\">Source</a><h4 class=\"code-header\">pub fn <a href=\"hashbrown/set/struct.HashSet.html#tymethod.is_empty\" class=\"fn\">is_empty</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if the set contains no elements.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>hashbrown::HashSet;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = HashSet::new();\n<span class=\"macro\">assert!</span>(v.is_empty());\nv.insert(<span class=\"number\">1</span>);\n<span class=\"macro\">assert!</span>(!v.is_empty());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.drain\" class=\"method\"><a class=\"src rightside\" href=\"src/hashbrown/set.rs.html#349\">Source</a><h4 class=\"code-header\">pub fn <a href=\"hashbrown/set/struct.HashSet.html#tymethod.drain\" class=\"fn\">drain</a>(&amp;mut self) -&gt; <a class=\"struct\" href=\"hashbrown/set/struct.Drain.html\" title=\"struct hashbrown::set::Drain\">Drain</a>&lt;'_, T, A&gt;</h4></section></summary><div class=\"docblock\"><p>Clears the set, returning all elements in an iterator.</p>\n<h5 id=\"examples-4\"><a class=\"doc-anchor\" href=\"#examples-4\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>hashbrown::HashSet;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>set: HashSet&lt;<span class=\"kw\">_</span>&gt; = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>].into_iter().collect();\n<span class=\"macro\">assert!</span>(!set.is_empty());\n\n<span class=\"comment\">// print 1, 2, 3 in an arbitrary order\n</span><span class=\"kw\">for </span>i <span class=\"kw\">in </span>set.drain() {\n    <span class=\"macro\">println!</span>(<span class=\"string\">\"{}\"</span>, i);\n}\n\n<span class=\"macro\">assert!</span>(set.is_empty());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.retain\" class=\"method\"><a class=\"src rightside\" href=\"src/hashbrown/set.rs.html#369-371\">Source</a><h4 class=\"code-header\">pub fn <a href=\"hashbrown/set/struct.HashSet.html#tymethod.retain\" class=\"fn\">retain</a>&lt;F&gt;(&amp;mut self, f: F)<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/std/primitive.reference.html\">&amp;T</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/std/primitive.bool.html\">bool</a>,</div></h4></section></summary><div class=\"docblock\"><p>Retains only the elements specified by the predicate.</p>\n<p>In other words, remove all elements <code>e</code> such that <code>f(&amp;e)</code> returns <code>false</code>.</p>\n<h5 id=\"examples-5\"><a class=\"doc-anchor\" href=\"#examples-5\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>hashbrown::HashSet;\n\n<span class=\"kw\">let </span>xs = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>];\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>set: HashSet&lt;i32&gt; = xs.into_iter().collect();\nset.retain(|<span class=\"kw-2\">&amp;</span>k| k % <span class=\"number\">2 </span>== <span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>(set.len(), <span class=\"number\">3</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extract_if\" class=\"method\"><a class=\"src rightside\" href=\"src/hashbrown/set.rs.html#405-407\">Source</a><h4 class=\"code-header\">pub fn <a href=\"hashbrown/set/struct.HashSet.html#tymethod.extract_if\" class=\"fn\">extract_if</a>&lt;F&gt;(&amp;mut self, f: F) -&gt; <a class=\"struct\" href=\"hashbrown/set/struct.ExtractIf.html\" title=\"struct hashbrown::set::ExtractIf\">ExtractIf</a>&lt;'_, T, F, A&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/std/primitive.reference.html\">&amp;T</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/std/primitive.bool.html\">bool</a>,</div></h4></section></summary><div class=\"docblock\"><p>Drains elements which are true under the given predicate,\nand returns an iterator over the removed items.</p>\n<p>In other words, move all elements <code>e</code> such that <code>f(&amp;e)</code> returns <code>true</code> out\ninto another iterator.</p>\n<p>If the returned <code>ExtractIf</code> is not exhausted, e.g. because it is dropped without iterating\nor the iteration short-circuits, then the remaining elements will be retained.\nUse <a href=\"hashbrown/set/struct.HashSet.html#method.retain\" title=\"method hashbrown::set::HashSet::retain\"><code>retain()</code></a> with a negated predicate if you do not need the returned iterator.</p>\n<h5 id=\"examples-6\"><a class=\"doc-anchor\" href=\"#examples-6\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>hashbrown::HashSet;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>set: HashSet&lt;i32&gt; = (<span class=\"number\">0</span>..<span class=\"number\">8</span>).collect();\n<span class=\"kw\">let </span>drained: HashSet&lt;i32&gt; = set.extract_if(|v| v % <span class=\"number\">2 </span>== <span class=\"number\">0</span>).collect();\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>evens = drained.into_iter().collect::&lt;Vec&lt;<span class=\"kw\">_</span>&gt;&gt;();\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>odds = set.into_iter().collect::&lt;Vec&lt;<span class=\"kw\">_</span>&gt;&gt;();\nevens.sort();\nodds.sort();\n\n<span class=\"macro\">assert_eq!</span>(evens, <span class=\"macro\">vec!</span>[<span class=\"number\">0</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">6</span>]);\n<span class=\"macro\">assert_eq!</span>(odds, <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>]);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clear\" class=\"method\"><a class=\"src rightside\" href=\"src/hashbrown/set.rs.html#431\">Source</a><h4 class=\"code-header\">pub fn <a href=\"hashbrown/set/struct.HashSet.html#tymethod.clear\" class=\"fn\">clear</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>Clears the set, removing all values.</p>\n<h5 id=\"examples-7\"><a class=\"doc-anchor\" href=\"#examples-7\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>hashbrown::HashSet;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = HashSet::new();\nv.insert(<span class=\"number\">1</span>);\nv.clear();\n<span class=\"macro\">assert!</span>(v.is_empty());</code></pre></div>\n</div></details></div></details>",0,"swc_allocator::api::arena::HashSet","swc_allocator::api::scoped::HashSet","swc_allocator::api::global::HashSet"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-HashSet%3CT,+S,+A%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/hashbrown/set.rs.html#514-516\">Source</a><a href=\"#impl-HashSet%3CT,+S,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, S, A&gt; <a class=\"struct\" href=\"hashbrown/set/struct.HashSet.html\" title=\"struct hashbrown::set::HashSet\">HashSet</a>&lt;T, S, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"allocator_api2/stable/alloc/trait.Allocator.html\" title=\"trait allocator_api2::stable::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.allocator\" class=\"method\"><a class=\"src rightside\" href=\"src/hashbrown/set.rs.html#520\">Source</a><h4 class=\"code-header\">pub fn <a href=\"hashbrown/set/struct.HashSet.html#tymethod.allocator\" class=\"fn\">allocator</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/std/primitive.reference.html\">&amp;A</a></h4></section></summary><div class=\"docblock\"><p>Returns a reference to the underlying allocator.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.with_hasher_in\" class=\"method\"><a class=\"src rightside\" href=\"src/hashbrown/set.rs.html#556\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"hashbrown/set/struct.HashSet.html#tymethod.with_hasher_in\" class=\"fn\">with_hasher_in</a>(hasher: S, alloc: A) -&gt; <a class=\"struct\" href=\"hashbrown/set/struct.HashSet.html\" title=\"struct hashbrown::set::HashSet\">HashSet</a>&lt;T, S, A&gt;</h4></section></summary><div class=\"docblock\"><p>Creates a new empty hash set which will use the given hasher to hash\nkeys.</p>\n<p>The hash set is initially created with a capacity of 0, so it will not\nallocate until it is first inserted into.</p>\n<h5 id=\"hashdos-resistance\"><a class=\"doc-anchor\" href=\"#hashdos-resistance\">§</a>HashDoS resistance</h5>\n<p>The <code>hash_builder</code> normally use a fixed key by default and that does\nnot allow the <code>HashSet</code> to be protected against attacks such as <a href=\"https://en.wikipedia.org/wiki/Collision_attack\"><code>HashDoS</code></a>.\nUsers who require HashDoS resistance should explicitly use\n<a href=\"ahash/random_state/struct.RandomState.html\" title=\"struct ahash::random_state::RandomState\"><code>ahash::RandomState</code></a> or <a href=\"https://doc.rust-lang.org/std/collections/hash_map/struct.RandomState.html\"><code>std::collections::hash_map::RandomState</code></a>\nas the hasher when creating a <a href=\"hashbrown/set/struct.HashSet.html\" title=\"struct hashbrown::set::HashSet\"><code>HashSet</code></a>.</p>\n<p>The <code>hash_builder</code> passed should implement the <a href=\"https://doc.rust-lang.org/std/hash/trait.BuildHasher.html\"><code>BuildHasher</code></a> trait for\nthe HashSet to be useful, see its documentation for details.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>hashbrown::HashSet;\n<span class=\"kw\">use </span>hashbrown::hash_map::DefaultHashBuilder;\n\n<span class=\"kw\">let </span>s = DefaultHashBuilder::default();\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>set = HashSet::with_hasher(s);\nset.insert(<span class=\"number\">2</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.with_capacity_and_hasher_in\" class=\"method\"><a class=\"src rightside\" href=\"src/hashbrown/set.rs.html#594\">Source</a><h4 class=\"code-header\">pub fn <a href=\"hashbrown/set/struct.HashSet.html#tymethod.with_capacity_and_hasher_in\" class=\"fn\">with_capacity_and_hasher_in</a>(\n    capacity: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/std/primitive.usize.html\">usize</a>,\n    hasher: S,\n    alloc: A,\n) -&gt; <a class=\"struct\" href=\"hashbrown/set/struct.HashSet.html\" title=\"struct hashbrown::set::HashSet\">HashSet</a>&lt;T, S, A&gt;</h4></section></summary><div class=\"docblock\"><p>Creates an empty <code>HashSet</code> with the specified capacity, using\n<code>hasher</code> to hash the keys.</p>\n<p>The hash set will be able to hold at least <code>capacity</code> elements without\nreallocating. If <code>capacity</code> is 0, the hash set will not allocate.</p>\n<h5 id=\"hashdos-resistance-1\"><a class=\"doc-anchor\" href=\"#hashdos-resistance-1\">§</a>HashDoS resistance</h5>\n<p>The <code>hash_builder</code> normally use a fixed key by default and that does\nnot allow the <code>HashSet</code> to be protected against attacks such as <a href=\"https://en.wikipedia.org/wiki/Collision_attack\"><code>HashDoS</code></a>.\nUsers who require HashDoS resistance should explicitly use\n<a href=\"ahash/random_state/struct.RandomState.html\" title=\"struct ahash::random_state::RandomState\"><code>ahash::RandomState</code></a> or <a href=\"https://doc.rust-lang.org/std/collections/hash_map/struct.RandomState.html\"><code>std::collections::hash_map::RandomState</code></a>\nas the hasher when creating a <a href=\"hashbrown/set/struct.HashSet.html\" title=\"struct hashbrown::set::HashSet\"><code>HashSet</code></a>.</p>\n<p>The <code>hash_builder</code> passed should implement the <a href=\"https://doc.rust-lang.org/std/hash/trait.BuildHasher.html\"><code>BuildHasher</code></a> trait for\nthe HashSet to be useful, see its documentation for details.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>hashbrown::HashSet;\n<span class=\"kw\">use </span>hashbrown::hash_map::DefaultHashBuilder;\n\n<span class=\"kw\">let </span>s = DefaultHashBuilder::default();\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>set = HashSet::with_capacity_and_hasher(<span class=\"number\">10</span>, s);\nset.insert(<span class=\"number\">1</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.hasher\" class=\"method\"><a class=\"src rightside\" href=\"src/hashbrown/set.rs.html#615\">Source</a><h4 class=\"code-header\">pub fn <a href=\"hashbrown/set/struct.HashSet.html#tymethod.hasher\" class=\"fn\">hasher</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/std/primitive.reference.html\">&amp;S</a></h4></section></summary><div class=\"docblock\"><p>Returns a reference to the set’s <a href=\"https://doc.rust-lang.org/std/hash/trait.BuildHasher.html\"><code>BuildHasher</code></a>.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>hashbrown::HashSet;\n<span class=\"kw\">use </span>hashbrown::hash_map::DefaultHashBuilder;\n\n<span class=\"kw\">let </span>hasher = DefaultHashBuilder::default();\n<span class=\"kw\">let </span>set: HashSet&lt;i32&gt; = HashSet::with_hasher(hasher);\n<span class=\"kw\">let </span>hasher: <span class=\"kw-2\">&amp;</span>DefaultHashBuilder = set.hasher();</code></pre></div>\n</div></details></div></details>",0,"swc_allocator::api::arena::HashSet","swc_allocator::api::scoped::HashSet","swc_allocator::api::global::HashSet"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-HashSet%3CT,+S,+A%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/hashbrown/set.rs.html#620-624\">Source</a><a href=\"#impl-HashSet%3CT,+S,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, S, A&gt; <a class=\"struct\" href=\"hashbrown/set/struct.HashSet.html\" title=\"struct hashbrown::set::HashSet\">HashSet</a>&lt;T, S, A&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a>,\n    S: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/hash/trait.BuildHasher.html\" title=\"trait core::hash::BuildHasher\">BuildHasher</a>,\n    A: <a class=\"trait\" href=\"allocator_api2/stable/alloc/trait.Allocator.html\" title=\"trait allocator_api2::stable::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.reserve\" class=\"method\"><a class=\"src rightside\" href=\"src/hashbrown/set.rs.html#648\">Source</a><h4 class=\"code-header\">pub fn <a href=\"hashbrown/set/struct.HashSet.html#tymethod.reserve\" class=\"fn\">reserve</a>(&amp;mut self, additional: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/std/primitive.usize.html\">usize</a>)</h4></section></summary><div class=\"docblock\"><p>Reserves capacity for at least <code>additional</code> more elements to be inserted\nin the <code>HashSet</code>. The collection may reserve more space to avoid\nfrequent reallocations.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if the new capacity exceeds <a href=\"https://doc.rust-lang.org/std/primitive.isize.html\"><code>isize::MAX</code></a> bytes and <a href=\"https://doc.rust-lang.org/alloc/alloc/fn.handle_alloc_error.html\"><code>abort</code></a> the program\nin case of allocation error. Use <a href=\"hashbrown/set/struct.HashSet.html#method.try_reserve\" title=\"method hashbrown::set::HashSet::try_reserve\"><code>try_reserve</code></a> instead\nif you want to handle memory allocation failure.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>hashbrown::HashSet;\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>set: HashSet&lt;i32&gt; = HashSet::new();\nset.reserve(<span class=\"number\">10</span>);\n<span class=\"macro\">assert!</span>(set.capacity() &gt;= <span class=\"number\">10</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_reserve\" class=\"method\"><a class=\"src rightside\" href=\"src/hashbrown/set.rs.html#669\">Source</a><h4 class=\"code-header\">pub fn <a href=\"hashbrown/set/struct.HashSet.html#tymethod.try_reserve\" class=\"fn\">try_reserve</a>(&amp;mut self, additional: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.89.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/std/primitive.unit.html\">()</a>, <a class=\"enum\" href=\"hashbrown/enum.TryReserveError.html\" title=\"enum hashbrown::TryReserveError\">TryReserveError</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Tries to reserve capacity for at least <code>additional</code> more elements to be inserted\nin the given <code>HashSet&lt;K,V&gt;</code>. The collection may reserve more space to avoid\nfrequent reallocations.</p>\n<h5 id=\"errors\"><a class=\"doc-anchor\" href=\"#errors\">§</a>Errors</h5>\n<p>If the capacity overflows, or the allocator reports a failure, then an error\nis returned.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>hashbrown::HashSet;\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>set: HashSet&lt;i32&gt; = HashSet::new();\nset.try_reserve(<span class=\"number\">10</span>).expect(<span class=\"string\">\"why is the test harness OOMing on 10 bytes?\"</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shrink_to_fit\" class=\"method\"><a class=\"src rightside\" href=\"src/hashbrown/set.rs.html#690\">Source</a><h4 class=\"code-header\">pub fn <a href=\"hashbrown/set/struct.HashSet.html#tymethod.shrink_to_fit\" class=\"fn\">shrink_to_fit</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>Shrinks the capacity of the set as much as possible. It will drop\ndown as much as possible while maintaining the internal rules\nand possibly leaving some space in accordance with the resize policy.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>hashbrown::HashSet;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>set = HashSet::with_capacity(<span class=\"number\">100</span>);\nset.insert(<span class=\"number\">1</span>);\nset.insert(<span class=\"number\">2</span>);\n<span class=\"macro\">assert!</span>(set.capacity() &gt;= <span class=\"number\">100</span>);\nset.shrink_to_fit();\n<span class=\"macro\">assert!</span>(set.capacity() &gt;= <span class=\"number\">2</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shrink_to\" class=\"method\"><a class=\"src rightside\" href=\"src/hashbrown/set.rs.html#716\">Source</a><h4 class=\"code-header\">pub fn <a href=\"hashbrown/set/struct.HashSet.html#tymethod.shrink_to\" class=\"fn\">shrink_to</a>(&amp;mut self, min_capacity: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/std/primitive.usize.html\">usize</a>)</h4></section></summary><div class=\"docblock\"><p>Shrinks the capacity of the set with a lower limit. It will drop\ndown no lower than the supplied limit while maintaining the internal rules\nand possibly leaving some space in accordance with the resize policy.</p>\n<p>Panics if the current capacity is smaller than the supplied\nminimum capacity.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>hashbrown::HashSet;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>set = HashSet::with_capacity(<span class=\"number\">100</span>);\nset.insert(<span class=\"number\">1</span>);\nset.insert(<span class=\"number\">2</span>);\n<span class=\"macro\">assert!</span>(set.capacity() &gt;= <span class=\"number\">100</span>);\nset.shrink_to(<span class=\"number\">10</span>);\n<span class=\"macro\">assert!</span>(set.capacity() &gt;= <span class=\"number\">10</span>);\nset.shrink_to(<span class=\"number\">0</span>);\n<span class=\"macro\">assert!</span>(set.capacity() &gt;= <span class=\"number\">2</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.difference\" class=\"method\"><a class=\"src rightside\" href=\"src/hashbrown/set.rs.html#744\">Source</a><h4 class=\"code-header\">pub fn <a href=\"hashbrown/set/struct.HashSet.html#tymethod.difference\" class=\"fn\">difference</a>&lt;'a&gt;(\n    &amp;'a self,\n    other: &amp;'a <a class=\"struct\" href=\"hashbrown/set/struct.HashSet.html\" title=\"struct hashbrown::set::HashSet\">HashSet</a>&lt;T, S, A&gt;,\n) -&gt; <a class=\"struct\" href=\"hashbrown/set/struct.Difference.html\" title=\"struct hashbrown::set::Difference\">Difference</a>&lt;'a, T, S, A&gt;</h4></section></summary><div class=\"docblock\"><p>Visits the values representing the difference,\ni.e., the values that are in <code>self</code> but not in <code>other</code>.</p>\n<h5 id=\"examples-4\"><a class=\"doc-anchor\" href=\"#examples-4\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>hashbrown::HashSet;\n<span class=\"kw\">let </span>a: HashSet&lt;<span class=\"kw\">_</span>&gt; = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>].into_iter().collect();\n<span class=\"kw\">let </span>b: HashSet&lt;<span class=\"kw\">_</span>&gt; = [<span class=\"number\">4</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>].into_iter().collect();\n\n<span class=\"comment\">// Can be seen as `a - b`.\n</span><span class=\"kw\">for </span>x <span class=\"kw\">in </span>a.difference(<span class=\"kw-2\">&amp;</span>b) {\n    <span class=\"macro\">println!</span>(<span class=\"string\">\"{}\"</span>, x); <span class=\"comment\">// Print 1\n</span>}\n\n<span class=\"kw\">let </span>diff: HashSet&lt;<span class=\"kw\">_</span>&gt; = a.difference(<span class=\"kw-2\">&amp;</span>b).collect();\n<span class=\"macro\">assert_eq!</span>(diff, [<span class=\"number\">1</span>].iter().collect());\n\n<span class=\"comment\">// Note that difference is not symmetric,\n// and `b - a` means something else:\n</span><span class=\"kw\">let </span>diff: HashSet&lt;<span class=\"kw\">_</span>&gt; = b.difference(<span class=\"kw-2\">&amp;</span>a).collect();\n<span class=\"macro\">assert_eq!</span>(diff, [<span class=\"number\">4</span>].iter().collect());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.symmetric_difference\" class=\"method\"><a class=\"src rightside\" href=\"src/hashbrown/set.rs.html#773\">Source</a><h4 class=\"code-header\">pub fn <a href=\"hashbrown/set/struct.HashSet.html#tymethod.symmetric_difference\" class=\"fn\">symmetric_difference</a>&lt;'a&gt;(\n    &amp;'a self,\n    other: &amp;'a <a class=\"struct\" href=\"hashbrown/set/struct.HashSet.html\" title=\"struct hashbrown::set::HashSet\">HashSet</a>&lt;T, S, A&gt;,\n) -&gt; <a class=\"struct\" href=\"hashbrown/set/struct.SymmetricDifference.html\" title=\"struct hashbrown::set::SymmetricDifference\">SymmetricDifference</a>&lt;'a, T, S, A&gt;</h4></section></summary><div class=\"docblock\"><p>Visits the values representing the symmetric difference,\ni.e., the values that are in <code>self</code> or in <code>other</code> but not in both.</p>\n<h5 id=\"examples-5\"><a class=\"doc-anchor\" href=\"#examples-5\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>hashbrown::HashSet;\n<span class=\"kw\">let </span>a: HashSet&lt;<span class=\"kw\">_</span>&gt; = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>].into_iter().collect();\n<span class=\"kw\">let </span>b: HashSet&lt;<span class=\"kw\">_</span>&gt; = [<span class=\"number\">4</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>].into_iter().collect();\n\n<span class=\"comment\">// Print 1, 4 in arbitrary order.\n</span><span class=\"kw\">for </span>x <span class=\"kw\">in </span>a.symmetric_difference(<span class=\"kw-2\">&amp;</span>b) {\n    <span class=\"macro\">println!</span>(<span class=\"string\">\"{}\"</span>, x);\n}\n\n<span class=\"kw\">let </span>diff1: HashSet&lt;<span class=\"kw\">_</span>&gt; = a.symmetric_difference(<span class=\"kw-2\">&amp;</span>b).collect();\n<span class=\"kw\">let </span>diff2: HashSet&lt;<span class=\"kw\">_</span>&gt; = b.symmetric_difference(<span class=\"kw-2\">&amp;</span>a).collect();\n\n<span class=\"macro\">assert_eq!</span>(diff1, diff2);\n<span class=\"macro\">assert_eq!</span>(diff1, [<span class=\"number\">1</span>, <span class=\"number\">4</span>].iter().collect());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.intersection\" class=\"method\"><a class=\"src rightside\" href=\"src/hashbrown/set.rs.html#798\">Source</a><h4 class=\"code-header\">pub fn <a href=\"hashbrown/set/struct.HashSet.html#tymethod.intersection\" class=\"fn\">intersection</a>&lt;'a&gt;(\n    &amp;'a self,\n    other: &amp;'a <a class=\"struct\" href=\"hashbrown/set/struct.HashSet.html\" title=\"struct hashbrown::set::HashSet\">HashSet</a>&lt;T, S, A&gt;,\n) -&gt; <a class=\"struct\" href=\"hashbrown/set/struct.Intersection.html\" title=\"struct hashbrown::set::Intersection\">Intersection</a>&lt;'a, T, S, A&gt;</h4></section></summary><div class=\"docblock\"><p>Visits the values representing the intersection,\ni.e., the values that are both in <code>self</code> and <code>other</code>.</p>\n<h5 id=\"examples-6\"><a class=\"doc-anchor\" href=\"#examples-6\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>hashbrown::HashSet;\n<span class=\"kw\">let </span>a: HashSet&lt;<span class=\"kw\">_</span>&gt; = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>].into_iter().collect();\n<span class=\"kw\">let </span>b: HashSet&lt;<span class=\"kw\">_</span>&gt; = [<span class=\"number\">4</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>].into_iter().collect();\n\n<span class=\"comment\">// Print 2, 3 in arbitrary order.\n</span><span class=\"kw\">for </span>x <span class=\"kw\">in </span>a.intersection(<span class=\"kw-2\">&amp;</span>b) {\n    <span class=\"macro\">println!</span>(<span class=\"string\">\"{}\"</span>, x);\n}\n\n<span class=\"kw\">let </span>intersection: HashSet&lt;<span class=\"kw\">_</span>&gt; = a.intersection(<span class=\"kw-2\">&amp;</span>b).collect();\n<span class=\"macro\">assert_eq!</span>(intersection, [<span class=\"number\">2</span>, <span class=\"number\">3</span>].iter().collect());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.union\" class=\"method\"><a class=\"src rightside\" href=\"src/hashbrown/set.rs.html#829\">Source</a><h4 class=\"code-header\">pub fn <a href=\"hashbrown/set/struct.HashSet.html#tymethod.union\" class=\"fn\">union</a>&lt;'a&gt;(&amp;'a self, other: &amp;'a <a class=\"struct\" href=\"hashbrown/set/struct.HashSet.html\" title=\"struct hashbrown::set::HashSet\">HashSet</a>&lt;T, S, A&gt;) -&gt; <a class=\"struct\" href=\"hashbrown/set/struct.Union.html\" title=\"struct hashbrown::set::Union\">Union</a>&lt;'a, T, S, A&gt;</h4></section></summary><div class=\"docblock\"><p>Visits the values representing the union,\ni.e., all the values in <code>self</code> or <code>other</code>, without duplicates.</p>\n<h5 id=\"examples-7\"><a class=\"doc-anchor\" href=\"#examples-7\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>hashbrown::HashSet;\n<span class=\"kw\">let </span>a: HashSet&lt;<span class=\"kw\">_</span>&gt; = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>].into_iter().collect();\n<span class=\"kw\">let </span>b: HashSet&lt;<span class=\"kw\">_</span>&gt; = [<span class=\"number\">4</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>].into_iter().collect();\n\n<span class=\"comment\">// Print 1, 2, 3, 4 in arbitrary order.\n</span><span class=\"kw\">for </span>x <span class=\"kw\">in </span>a.union(<span class=\"kw-2\">&amp;</span>b) {\n    <span class=\"macro\">println!</span>(<span class=\"string\">\"{}\"</span>, x);\n}\n\n<span class=\"kw\">let union</span>: HashSet&lt;<span class=\"kw\">_</span>&gt; = a.union(<span class=\"kw-2\">&amp;</span>b).collect();\n<span class=\"macro\">assert_eq!</span>(union, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>].iter().collect());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.contains\" class=\"method\"><a class=\"src rightside\" href=\"src/hashbrown/set.rs.html#861-863\">Source</a><h4 class=\"code-header\">pub fn <a href=\"hashbrown/set/struct.HashSet.html#tymethod.contains\" class=\"fn\">contains</a>&lt;Q&gt;(&amp;self, value: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/std/primitive.reference.html\">&amp;Q</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/std/primitive.bool.html\">bool</a><div class=\"where\">where\n    Q: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> + <a class=\"trait\" href=\"hashbrown/trait.Equivalent.html\" title=\"trait hashbrown::Equivalent\">Equivalent</a>&lt;T&gt; + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if the set contains a value.</p>\n<p>The value may be any borrowed form of the set’s value type, but\n<a href=\"https://doc.rust-lang.org/std/hash/trait.Hash.html\"><code>Hash</code></a> and <a href=\"https://doc.rust-lang.org/std/cmp/trait.Eq.html\"><code>Eq</code></a> on the borrowed form <em>must</em> match those for\nthe value type.</p>\n<h5 id=\"examples-8\"><a class=\"doc-anchor\" href=\"#examples-8\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>hashbrown::HashSet;\n\n<span class=\"kw\">let </span>set: HashSet&lt;<span class=\"kw\">_</span>&gt; = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>].into_iter().collect();\n<span class=\"macro\">assert_eq!</span>(set.contains(<span class=\"kw-2\">&amp;</span><span class=\"number\">1</span>), <span class=\"bool-val\">true</span>);\n<span class=\"macro\">assert_eq!</span>(set.contains(<span class=\"kw-2\">&amp;</span><span class=\"number\">4</span>), <span class=\"bool-val\">false</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get\" class=\"method\"><a class=\"src rightside\" href=\"src/hashbrown/set.rs.html#887-889\">Source</a><h4 class=\"code-header\">pub fn <a href=\"hashbrown/set/struct.HashSet.html#tymethod.get\" class=\"fn\">get</a>&lt;Q&gt;(&amp;self, value: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/std/primitive.reference.html\">&amp;Q</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.89.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/std/primitive.reference.html\">&amp;T</a>&gt;<div class=\"where\">where\n    Q: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> + <a class=\"trait\" href=\"hashbrown/trait.Equivalent.html\" title=\"trait hashbrown::Equivalent\">Equivalent</a>&lt;T&gt; + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\"><p>Returns a reference to the value in the set, if any, that is equal to the given value.</p>\n<p>The value may be any borrowed form of the set’s value type, but\n<a href=\"https://doc.rust-lang.org/std/hash/trait.Hash.html\"><code>Hash</code></a> and <a href=\"https://doc.rust-lang.org/std/cmp/trait.Eq.html\"><code>Eq</code></a> on the borrowed form <em>must</em> match those for\nthe value type.</p>\n<h5 id=\"examples-9\"><a class=\"doc-anchor\" href=\"#examples-9\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>hashbrown::HashSet;\n\n<span class=\"kw\">let </span>set: HashSet&lt;<span class=\"kw\">_</span>&gt; = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>].into_iter().collect();\n<span class=\"macro\">assert_eq!</span>(set.get(<span class=\"kw-2\">&amp;</span><span class=\"number\">2</span>), <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span><span class=\"number\">2</span>));\n<span class=\"macro\">assert_eq!</span>(set.get(<span class=\"kw-2\">&amp;</span><span class=\"number\">4</span>), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_or_insert\" class=\"method\"><a class=\"src rightside\" href=\"src/hashbrown/set.rs.html#913\">Source</a><h4 class=\"code-header\">pub fn <a href=\"hashbrown/set/struct.HashSet.html#tymethod.get_or_insert\" class=\"fn\">get_or_insert</a>(&amp;mut self, value: T) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/std/primitive.reference.html\">&amp;T</a></h4></section></summary><div class=\"docblock\"><p>Inserts the given <code>value</code> into the set if it is not present, then\nreturns a reference to the value in the set.</p>\n<h5 id=\"examples-10\"><a class=\"doc-anchor\" href=\"#examples-10\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>hashbrown::HashSet;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>set: HashSet&lt;<span class=\"kw\">_</span>&gt; = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>].into_iter().collect();\n<span class=\"macro\">assert_eq!</span>(set.len(), <span class=\"number\">3</span>);\n<span class=\"macro\">assert_eq!</span>(set.get_or_insert(<span class=\"number\">2</span>), <span class=\"kw-2\">&amp;</span><span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(set.get_or_insert(<span class=\"number\">100</span>), <span class=\"kw-2\">&amp;</span><span class=\"number\">100</span>);\n<span class=\"macro\">assert_eq!</span>(set.len(), <span class=\"number\">4</span>); <span class=\"comment\">// 100 was inserted</span></code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_or_insert_owned\" class=\"method\"><a class=\"src rightside\" href=\"src/hashbrown/set.rs.html#942-944\">Source</a><h4 class=\"code-header\">pub fn <a href=\"hashbrown/set/struct.HashSet.html#tymethod.get_or_insert_owned\" class=\"fn\">get_or_insert_owned</a>&lt;Q&gt;(&amp;mut self, value: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/std/primitive.reference.html\">&amp;Q</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/std/primitive.reference.html\">&amp;T</a><div class=\"where\">where\n    Q: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> + <a class=\"trait\" href=\"hashbrown/trait.Equivalent.html\" title=\"trait hashbrown::Equivalent\">Equivalent</a>&lt;T&gt; + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/alloc/borrow/trait.ToOwned.html\" title=\"trait alloc::borrow::ToOwned\">ToOwned</a>&lt;Owned = T&gt; + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\"><p>Inserts an owned copy of the given <code>value</code> into the set if it is not\npresent, then returns a reference to the value in the set.</p>\n<h5 id=\"examples-11\"><a class=\"doc-anchor\" href=\"#examples-11\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>hashbrown::HashSet;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>set: HashSet&lt;String&gt; = [<span class=\"string\">\"cat\"</span>, <span class=\"string\">\"dog\"</span>, <span class=\"string\">\"horse\"</span>]\n    .iter().map(|<span class=\"kw-2\">&amp;</span>pet| pet.to_owned()).collect();\n\n<span class=\"macro\">assert_eq!</span>(set.len(), <span class=\"number\">3</span>);\n<span class=\"kw\">for </span><span class=\"kw-2\">&amp;</span>pet <span class=\"kw\">in </span><span class=\"kw-2\">&amp;</span>[<span class=\"string\">\"cat\"</span>, <span class=\"string\">\"dog\"</span>, <span class=\"string\">\"fish\"</span>] {\n    <span class=\"kw\">let </span>value = set.get_or_insert_owned(pet);\n    <span class=\"macro\">assert_eq!</span>(value, pet);\n}\n<span class=\"macro\">assert_eq!</span>(set.len(), <span class=\"number\">4</span>); <span class=\"comment\">// a new \"fish\" was inserted</span></code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_or_insert_with\" class=\"method\"><a class=\"src rightside\" href=\"src/hashbrown/set.rs.html#974-977\">Source</a><h4 class=\"code-header\">pub fn <a href=\"hashbrown/set/struct.HashSet.html#tymethod.get_or_insert_with\" class=\"fn\">get_or_insert_with</a>&lt;Q, F&gt;(&amp;mut self, value: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/std/primitive.reference.html\">&amp;Q</a>, f: F) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/std/primitive.reference.html\">&amp;T</a><div class=\"where\">where\n    Q: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> + <a class=\"trait\" href=\"hashbrown/trait.Equivalent.html\" title=\"trait hashbrown::Equivalent\">Equivalent</a>&lt;T&gt; + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/std/primitive.reference.html\">&amp;Q</a>) -&gt; T,</div></h4></section></summary><div class=\"docblock\"><p>Inserts a value computed from <code>f</code> into the set if the given <code>value</code> is\nnot present, then returns a reference to the value in the set.</p>\n<h5 id=\"examples-12\"><a class=\"doc-anchor\" href=\"#examples-12\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>hashbrown::HashSet;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>set: HashSet&lt;String&gt; = [<span class=\"string\">\"cat\"</span>, <span class=\"string\">\"dog\"</span>, <span class=\"string\">\"horse\"</span>]\n    .iter().map(|<span class=\"kw-2\">&amp;</span>pet| pet.to_owned()).collect();\n\n<span class=\"macro\">assert_eq!</span>(set.len(), <span class=\"number\">3</span>);\n<span class=\"kw\">for </span><span class=\"kw-2\">&amp;</span>pet <span class=\"kw\">in </span><span class=\"kw-2\">&amp;</span>[<span class=\"string\">\"cat\"</span>, <span class=\"string\">\"dog\"</span>, <span class=\"string\">\"fish\"</span>] {\n    <span class=\"kw\">let </span>value = set.get_or_insert_with(pet, str::to_owned);\n    <span class=\"macro\">assert_eq!</span>(value, pet);\n}\n<span class=\"macro\">assert_eq!</span>(set.len(), <span class=\"number\">4</span>); <span class=\"comment\">// a new \"fish\" was inserted</span></code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.entry\" class=\"method\"><a class=\"src rightside\" href=\"src/hashbrown/set.rs.html#1022\">Source</a><h4 class=\"code-header\">pub fn <a href=\"hashbrown/set/struct.HashSet.html#tymethod.entry\" class=\"fn\">entry</a>(&amp;mut self, value: T) -&gt; <a class=\"enum\" href=\"hashbrown/set/enum.Entry.html\" title=\"enum hashbrown::set::Entry\">Entry</a>&lt;'_, T, S, A&gt;</h4></section></summary><div class=\"docblock\"><p>Gets the given value’s corresponding entry in the set for in-place manipulation.</p>\n<h5 id=\"examples-13\"><a class=\"doc-anchor\" href=\"#examples-13\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>hashbrown::HashSet;\n<span class=\"kw\">use </span>hashbrown::hash_set::Entry::<span class=\"kw-2\">*</span>;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>singles = HashSet::new();\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>dupes = HashSet::new();\n\n<span class=\"kw\">for </span>ch <span class=\"kw\">in </span><span class=\"string\">\"a short treatise on fungi\"</span>.chars() {\n    <span class=\"kw\">if let </span>Vacant(dupe_entry) = dupes.entry(ch) {\n        <span class=\"comment\">// We haven't already seen a duplicate, so\n        // check if we've at least seen it once.\n        </span><span class=\"kw\">match </span>singles.entry(ch) {\n            Vacant(single_entry) =&gt; {\n                <span class=\"comment\">// We found a new character for the first time.\n                </span>single_entry.insert()\n            }\n            Occupied(single_entry) =&gt; {\n                <span class=\"comment\">// We've already seen this once, \"move\" it to dupes.\n                </span>single_entry.remove();\n                dupe_entry.insert();\n            }\n        }\n    }\n}\n\n<span class=\"macro\">assert!</span>(!singles.contains(<span class=\"kw-2\">&amp;</span><span class=\"string\">'t'</span>) &amp;&amp; dupes.contains(<span class=\"kw-2\">&amp;</span><span class=\"string\">'t'</span>));\n<span class=\"macro\">assert!</span>(singles.contains(<span class=\"kw-2\">&amp;</span><span class=\"string\">'u'</span>) &amp;&amp; !dupes.contains(<span class=\"kw-2\">&amp;</span><span class=\"string\">'u'</span>));\n<span class=\"macro\">assert!</span>(!singles.contains(<span class=\"kw-2\">&amp;</span><span class=\"string\">'v'</span>) &amp;&amp; !dupes.contains(<span class=\"kw-2\">&amp;</span><span class=\"string\">'v'</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_disjoint\" class=\"method\"><a class=\"src rightside\" href=\"src/hashbrown/set.rs.html#1046\">Source</a><h4 class=\"code-header\">pub fn <a href=\"hashbrown/set/struct.HashSet.html#tymethod.is_disjoint\" class=\"fn\">is_disjoint</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"hashbrown/set/struct.HashSet.html\" title=\"struct hashbrown::set::HashSet\">HashSet</a>&lt;T, S, A&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if <code>self</code> has no elements in common with <code>other</code>.\nThis is equivalent to checking for an empty intersection.</p>\n<h5 id=\"examples-14\"><a class=\"doc-anchor\" href=\"#examples-14\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>hashbrown::HashSet;\n\n<span class=\"kw\">let </span>a: HashSet&lt;<span class=\"kw\">_</span>&gt; = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>].into_iter().collect();\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>b = HashSet::new();\n\n<span class=\"macro\">assert_eq!</span>(a.is_disjoint(<span class=\"kw-2\">&amp;</span>b), <span class=\"bool-val\">true</span>);\nb.insert(<span class=\"number\">4</span>);\n<span class=\"macro\">assert_eq!</span>(a.is_disjoint(<span class=\"kw-2\">&amp;</span>b), <span class=\"bool-val\">true</span>);\nb.insert(<span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(a.is_disjoint(<span class=\"kw-2\">&amp;</span>b), <span class=\"bool-val\">false</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_subset\" class=\"method\"><a class=\"src rightside\" href=\"src/hashbrown/set.rs.html#1067\">Source</a><h4 class=\"code-header\">pub fn <a href=\"hashbrown/set/struct.HashSet.html#tymethod.is_subset\" class=\"fn\">is_subset</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"hashbrown/set/struct.HashSet.html\" title=\"struct hashbrown::set::HashSet\">HashSet</a>&lt;T, S, A&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if the set is a subset of another,\ni.e., <code>other</code> contains at least all the values in <code>self</code>.</p>\n<h5 id=\"examples-15\"><a class=\"doc-anchor\" href=\"#examples-15\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>hashbrown::HashSet;\n\n<span class=\"kw\">let </span>sup: HashSet&lt;<span class=\"kw\">_</span>&gt; = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>].into_iter().collect();\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>set = HashSet::new();\n\n<span class=\"macro\">assert_eq!</span>(set.is_subset(<span class=\"kw-2\">&amp;</span>sup), <span class=\"bool-val\">true</span>);\nset.insert(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(set.is_subset(<span class=\"kw-2\">&amp;</span>sup), <span class=\"bool-val\">true</span>);\nset.insert(<span class=\"number\">4</span>);\n<span class=\"macro\">assert_eq!</span>(set.is_subset(<span class=\"kw-2\">&amp;</span>sup), <span class=\"bool-val\">false</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_superset\" class=\"method\"><a class=\"src rightside\" href=\"src/hashbrown/set.rs.html#1092\">Source</a><h4 class=\"code-header\">pub fn <a href=\"hashbrown/set/struct.HashSet.html#tymethod.is_superset\" class=\"fn\">is_superset</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"hashbrown/set/struct.HashSet.html\" title=\"struct hashbrown::set::HashSet\">HashSet</a>&lt;T, S, A&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if the set is a superset of another,\ni.e., <code>self</code> contains at least all the values in <code>other</code>.</p>\n<h5 id=\"examples-16\"><a class=\"doc-anchor\" href=\"#examples-16\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>hashbrown::HashSet;\n\n<span class=\"kw\">let </span>sub: HashSet&lt;<span class=\"kw\">_</span>&gt; = [<span class=\"number\">1</span>, <span class=\"number\">2</span>].into_iter().collect();\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>set = HashSet::new();\n\n<span class=\"macro\">assert_eq!</span>(set.is_superset(<span class=\"kw-2\">&amp;</span>sub), <span class=\"bool-val\">false</span>);\n\nset.insert(<span class=\"number\">0</span>);\nset.insert(<span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(set.is_superset(<span class=\"kw-2\">&amp;</span>sub), <span class=\"bool-val\">false</span>);\n\nset.insert(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(set.is_superset(<span class=\"kw-2\">&amp;</span>sub), <span class=\"bool-val\">true</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.insert\" class=\"method\"><a class=\"src rightside\" href=\"src/hashbrown/set.rs.html#1114\">Source</a><h4 class=\"code-header\">pub fn <a href=\"hashbrown/set/struct.HashSet.html#tymethod.insert\" class=\"fn\">insert</a>(&amp;mut self, value: T) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Adds a value to the set.</p>\n<p>If the set did not have this value present, <code>true</code> is returned.</p>\n<p>If the set did have this value present, <code>false</code> is returned.</p>\n<h5 id=\"examples-17\"><a class=\"doc-anchor\" href=\"#examples-17\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>hashbrown::HashSet;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>set = HashSet::new();\n\n<span class=\"macro\">assert_eq!</span>(set.insert(<span class=\"number\">2</span>), <span class=\"bool-val\">true</span>);\n<span class=\"macro\">assert_eq!</span>(set.insert(<span class=\"number\">2</span>), <span class=\"bool-val\">false</span>);\n<span class=\"macro\">assert_eq!</span>(set.len(), <span class=\"number\">1</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.insert_unique_unchecked\" class=\"method\"><a class=\"src rightside\" href=\"src/hashbrown/set.rs.html#1138\">Source</a><h4 class=\"code-header\">pub fn <a href=\"hashbrown/set/struct.HashSet.html#tymethod.insert_unique_unchecked\" class=\"fn\">insert_unique_unchecked</a>(&amp;mut self, value: T) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/std/primitive.reference.html\">&amp;T</a></h4></section></summary><div class=\"docblock\"><p>Insert a value the set without checking if the value already exists in the set.</p>\n<p>Returns a reference to the value just inserted.</p>\n<p>This operation is safe if a value does not exist in the set.</p>\n<p>However, if a value exists in the set already, the behavior is unspecified:\nthis operation may panic, loop forever, or any following operation with the set\nmay panic, loop forever or return arbitrary result.</p>\n<p>That said, this operation (and following operations) are guaranteed to\nnot violate memory safety.</p>\n<p>This operation is faster than regular insert, because it does not perform\nlookup before insertion.</p>\n<p>This operation is useful during initial population of the set.\nFor example, when constructing a set from another set, we know\nthat values are unique.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.replace\" class=\"method\"><a class=\"src rightside\" href=\"src/hashbrown/set.rs.html#1158\">Source</a><h4 class=\"code-header\">pub fn <a href=\"hashbrown/set/struct.HashSet.html#tymethod.replace\" class=\"fn\">replace</a>(&amp;mut self, value: T) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.89.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Adds a value to the set, replacing the existing value, if any, that is equal to the given\none. Returns the replaced value.</p>\n<h5 id=\"examples-18\"><a class=\"doc-anchor\" href=\"#examples-18\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>hashbrown::HashSet;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>set = HashSet::new();\nset.insert(Vec::&lt;i32&gt;::new());\n\n<span class=\"macro\">assert_eq!</span>(set.get(<span class=\"kw-2\">&amp;</span>[][..]).unwrap().capacity(), <span class=\"number\">0</span>);\nset.replace(Vec::with_capacity(<span class=\"number\">10</span>));\n<span class=\"macro\">assert_eq!</span>(set.get(<span class=\"kw-2\">&amp;</span>[][..]).unwrap().capacity(), <span class=\"number\">10</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.remove\" class=\"method\"><a class=\"src rightside\" href=\"src/hashbrown/set.rs.html#1190-1192\">Source</a><h4 class=\"code-header\">pub fn <a href=\"hashbrown/set/struct.HashSet.html#tymethod.remove\" class=\"fn\">remove</a>&lt;Q&gt;(&amp;mut self, value: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/std/primitive.reference.html\">&amp;Q</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/std/primitive.bool.html\">bool</a><div class=\"where\">where\n    Q: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> + <a class=\"trait\" href=\"hashbrown/trait.Equivalent.html\" title=\"trait hashbrown::Equivalent\">Equivalent</a>&lt;T&gt; + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\"><p>Removes a value from the set. Returns whether the value was\npresent in the set.</p>\n<p>The value may be any borrowed form of the set’s value type, but\n<a href=\"https://doc.rust-lang.org/std/hash/trait.Hash.html\"><code>Hash</code></a> and <a href=\"https://doc.rust-lang.org/std/cmp/trait.Eq.html\"><code>Eq</code></a> on the borrowed form <em>must</em> match those for\nthe value type.</p>\n<h5 id=\"examples-19\"><a class=\"doc-anchor\" href=\"#examples-19\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>hashbrown::HashSet;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>set = HashSet::new();\n\nset.insert(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(set.remove(<span class=\"kw-2\">&amp;</span><span class=\"number\">2</span>), <span class=\"bool-val\">true</span>);\n<span class=\"macro\">assert_eq!</span>(set.remove(<span class=\"kw-2\">&amp;</span><span class=\"number\">2</span>), <span class=\"bool-val\">false</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.take\" class=\"method\"><a class=\"src rightside\" href=\"src/hashbrown/set.rs.html#1216-1218\">Source</a><h4 class=\"code-header\">pub fn <a href=\"hashbrown/set/struct.HashSet.html#tymethod.take\" class=\"fn\">take</a>&lt;Q&gt;(&amp;mut self, value: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/std/primitive.reference.html\">&amp;Q</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.89.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    Q: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> + <a class=\"trait\" href=\"hashbrown/trait.Equivalent.html\" title=\"trait hashbrown::Equivalent\">Equivalent</a>&lt;T&gt; + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\"><p>Removes and returns the value in the set, if any, that is equal to the given one.</p>\n<p>The value may be any borrowed form of the set’s value type, but\n<a href=\"https://doc.rust-lang.org/std/hash/trait.Hash.html\"><code>Hash</code></a> and <a href=\"https://doc.rust-lang.org/std/cmp/trait.Eq.html\"><code>Eq</code></a> on the borrowed form <em>must</em> match those for\nthe value type.</p>\n<h5 id=\"examples-20\"><a class=\"doc-anchor\" href=\"#examples-20\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>hashbrown::HashSet;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>set: HashSet&lt;<span class=\"kw\">_</span>&gt; = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>].into_iter().collect();\n<span class=\"macro\">assert_eq!</span>(set.take(<span class=\"kw-2\">&amp;</span><span class=\"number\">2</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>));\n<span class=\"macro\">assert_eq!</span>(set.take(<span class=\"kw-2\">&amp;</span><span class=\"number\">2</span>), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details></div></details>",0,"swc_allocator::api::arena::HashSet","swc_allocator::api::scoped::HashSet","swc_allocator::api::global::HashSet"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IntoIterator-for-HashSet%3CT,+S,+A%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/hashbrown/set.rs.html#1648\">Source</a><a href=\"#impl-IntoIterator-for-HashSet%3CT,+S,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, S, A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a> for <a class=\"struct\" href=\"hashbrown/set/struct.HashSet.html\" title=\"struct hashbrown::set::HashSet\">HashSet</a>&lt;T, S, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"allocator_api2/stable/alloc/trait.Allocator.html\" title=\"trait allocator_api2::stable::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_iter\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/hashbrown/set.rs.html#1673\">Source</a><a href=\"#method.into_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.89.0/core/iter/traits/collect/trait.IntoIterator.html#tymethod.into_iter\" class=\"fn\">into_iter</a>(self) -&gt; <a class=\"struct\" href=\"hashbrown/set/struct.IntoIter.html\" title=\"struct hashbrown::set::IntoIter\">IntoIter</a>&lt;T, A&gt;</h4></section></summary><div class=\"docblock\"><p>Creates a consuming iterator, that is, one that moves each value out\nof the set in arbitrary order. The set cannot be used after calling\nthis.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>hashbrown::HashSet;\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>set = HashSet::new();\nset.insert(<span class=\"string\">\"a\"</span>.to_string());\nset.insert(<span class=\"string\">\"b\"</span>.to_string());\n\n<span class=\"comment\">// Not possible to collect to a Vec&lt;String&gt; with a regular `.iter()`.\n</span><span class=\"kw\">let </span>v: Vec&lt;String&gt; = set.into_iter().collect();\n\n<span class=\"comment\">// Will print in an arbitrary order.\n</span><span class=\"kw\">for </span>x <span class=\"kw\">in </span><span class=\"kw-2\">&amp;</span>v {\n    <span class=\"macro\">println!</span>(<span class=\"string\">\"{}\"</span>, x);\n}</code></pre></div>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Item\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/hashbrown/set.rs.html#1649\">Source</a><a href=\"#associatedtype.Item\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.89.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.Item\" class=\"associatedtype\">Item</a> = T</h4></section></summary><div class='docblock'>The type of the elements being iterated over.</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.IntoIter\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/hashbrown/set.rs.html#1650\">Source</a><a href=\"#associatedtype.IntoIter\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.89.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.IntoIter\" class=\"associatedtype\">IntoIter</a> = <a class=\"struct\" href=\"hashbrown/set/struct.IntoIter.html\" title=\"struct hashbrown::set::IntoIter\">IntoIter</a>&lt;T, A&gt;</h4></section></summary><div class='docblock'>Which kind of iterator are we turning this into?</div></details></div></details>","IntoIterator","swc_allocator::api::arena::HashSet","swc_allocator::api::scoped::HashSet","swc_allocator::api::global::HashSet"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq-for-HashSet%3CT,+S,+A%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/hashbrown/set.rs.html#1270-1274\">Source</a><a href=\"#impl-PartialEq-for-HashSet%3CT,+S,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, S, A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a> for <a class=\"struct\" href=\"hashbrown/set/struct.HashSet.html\" title=\"struct hashbrown::set::HashSet\">HashSet</a>&lt;T, S, A&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a>,\n    S: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/hash/trait.BuildHasher.html\" title=\"trait core::hash::BuildHasher\">BuildHasher</a>,\n    A: <a class=\"trait\" href=\"allocator_api2/stable/alloc/trait.Allocator.html\" title=\"trait allocator_api2::stable::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/hashbrown/set.rs.html#1276\">Source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.89.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"hashbrown/set/struct.HashSet.html\" title=\"struct hashbrown::set::HashSet\">HashSet</a>&lt;T, S, A&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.89.0/src/core/cmp.rs.html#263\">Source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.89.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq","swc_allocator::api::arena::HashSet","swc_allocator::api::scoped::HashSet","swc_allocator::api::global::HashSet"],["<section id=\"impl-Eq-for-HashSet%3CT,+S,+A%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/hashbrown/set.rs.html#1285-1289\">Source</a><a href=\"#impl-Eq-for-HashSet%3CT,+S,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, S, A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> for <a class=\"struct\" href=\"hashbrown/set/struct.HashSet.html\" title=\"struct hashbrown::set::HashSet\">HashSet</a>&lt;T, S, A&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a>,\n    S: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/hash/trait.BuildHasher.html\" title=\"trait core::hash::BuildHasher\">BuildHasher</a>,\n    A: <a class=\"trait\" href=\"allocator_api2/stable/alloc/trait.Allocator.html\" title=\"trait allocator_api2::stable::alloc::Allocator\">Allocator</a>,</div></h3></section>","Eq","swc_allocator::api::arena::HashSet","swc_allocator::api::scoped::HashSet","swc_allocator::api::global::HashSet"]]]]);
    if (window.register_type_impls) {
        window.register_type_impls(type_impls);
    } else {
        window.pending_type_impls = type_impls;
    }
})()
//{"start":55,"fragment_lengths":[114050]}