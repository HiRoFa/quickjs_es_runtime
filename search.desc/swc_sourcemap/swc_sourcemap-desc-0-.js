searchState.loadedDescShard("swc_sourcemap", 0, "This library implements basic processing of JavaScript …\na JSON parsing related failure\na reference to a non existing name was encountered\na mapping segment had an unsupported size\na reference to a non existing source was encountered\nFlatten failed\nRepresents the result of a decode operation\nContains the error value\nRepresents different failure cases\nIndicates a sourcemap as generated by Metro+Hermes, as …\nIndicates that an incompatible sourcemap format was …\nIndicates a sourcemap index\nIndicates an invalid data URL\nA RAM bundle entry was invalid\nThe RAM bundle index was malformed\nThe magic of a RAM bundle did not match\nRange mapping index is invalid\na std::io error\nA legacy URL reference\nIterates over all tokens in a sourcemap\nTried to operate on a non RAM bundle file\nContains the success value\nRepresents a raw token\nA regular URL reference\nIndicates a regular sourcemap\nRepresents results from this library\nControls the <code>SourceMap::rewrite</code> behavior\nIterates over all source contents in a sourcemap\nIterates over all sources in a sourcemap\nRepresents a sourcemap in memory\nHelper for sourcemap generation\nRepresents a <code>react-native</code>-style SourceMap, which has …\nRepresents a sourcemap index in memory\nRepresents a reference to a sourcemap\nRepresents a section in a sourcemap index\nIterates over all sections in a sourcemap index\nProvides efficient access to minified sources.\nRepresents a token from a sourcemap\nIterates over all tokens in a sourcemap\na std::str::Utf8Error\na VLQ string was malformed and data was left over\na VLQ string was empty and no values could be decoded.\nOverflow in Vlq handling\nAdds a new mapping to the builder.\nRegisters a name with the builder and returns the name ID.\nAdds a new mapping to the builder.\nRegisters a new source with the builder and returns the …\nShortcut for adding a new mapping based of an already …\nAdjusts the mappings in <code>self</code> using the mappings in …\nPerform a similar operation as <code>Self::adjust_mappings</code>, but …\nAdjusts all of the sections’ offset rows by the given …\nThe base path to the used for source reference resolving …\nReturns the debug ID of the sourcemap, if it exists.\nDecodes a sourcemap or sourcemap index from a reader\nLoads a sourcemap from a data URL\nDecodes a sourcemap or sourcemap index from a byte slice\nthe destination (minified) column number (0-indexed)\nthe destination (minified) line number (0-indexed)\nFlattens an indexed sourcemap into a regular one.  This …\nFlattens an indexed sourcemap into a regular one and …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a sourcemap from a reader over a JSON stream in …\nAlias for <code>decode</code>.\nCreates a sourcemap index from a reader over a JSON stream …\nCreates a sourcemap from a reader over a JSON stream in …\nCreates a sourcemap from a reader over a JSON byte slice …\nCreates a sourcemap index from a reader over a JSON byte …\nCreates a sourcemap from a reader over a JSON byte slice …\nCreates an optimized view from a given source string\nReturns the embedded debug id.\nget the destination line and column\nget the destination (minified) column number\nget the destination (minified) line number\nLoad an embedded sourcemap if there is a data URL.\nReturns the currently set file.\nReturns the embedded filename in case there is one.\nReturns the embedded filename in case there is one.\nReturns a requested minified line.\nReturns a line slice.\nget the name if it exists as string\nLooks up a name for a specific index.\nReturns the number of names in the sourcemap.\nReturn the name ID of the token\nReturns the offset as tuple\nReturns the offset column\nReturns the offset line\nGiven a token and minified function name this attemps to …\nGiven a bytecode offset, this will find the enclosing …\nReturns the original function name.\nGiven a location, name and minified source file resolve a …\nGiven a location, name and minified source file resolve a …\nGet the underlying raw token\nResolves the name of the enclosing function for the given …\nLooks up a single section and returns it\nReturns the number of sections in this index\nLooks up a single section and returns it as a mutable ref\nLooks up a source name for an ID.\nget the source if it exists as string\nLooks up a source for a specific index.\nReturns the current source contents for a source.\nLooks up the content for a source.\nReturns the number of sources in the sourcemap.\nReturns the embedded source_root in case there is one.\nReturns the embedded source_root in case there is one.\nReturns the referenced source view.\nReturns the sources content as source view.\nReturns a reference to the embedded sourcemap if available\nReturns a reference to the embedded sourcemap if available\nget the source line and column\nGet the source column number.\nReturn the source ID of the token\nGet the source line number.\nLooks up a token by its index.\nReturns the number of tokens in the sourcemap.\nReturn the URL of the reference\nReturns the URL of the referenced map if available\nreturns <code>true</code> if a name exists, <code>false</code> otherwise\nReturns true if there are any names in the map.\nIs there a source for this token?\nChecks if a given source ID has source contents available.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts the builder into a sourcemap.\nReturns <code>true</code> if this sourcemap is for a RAM bundle.\nIf true, this token is a range token.\nIf true, this token is a range token.\nChecks if a valid sourcemap can be read from the given …\nChecks if the given byte slice contains a sourcemap\nThis is <em>lazy</em> because we skip deserializing all the fields …\nReturns the number of lines.\nReturns an iterator over all lines.\nLoads source contents from locally accessible files if …\nIf enabled local source contents that are not in the file …\nLocates a sourcemap reference\nLocates a sourcemap reference in a slice\nShortcut to look up a token on either an index or a …\nLooks up the closest token to a given line and column.\nLooks up the closest token to a given 0-indexed line and …\nHelper function to calculate the path from a base file to …\nname identifier (<code>!0</code> in case there is no associated name)\nReturns an iterator over the names.\nCreates a new source map builder and sets the file.\nCreates an optimized view of a given source.\nCreate a new sourcemap index section\nConstructs a new sourcemap index from raw components.\nConstructs a new sourcemap from raw components.\nConstructs a new sourcemap index from raw components …\nRemoves all names from the sourcemap.\nResolves the reference.\nResolves the reference against a local file path\nThis rewrites the sourcemap according to the provided …\nThis rewrites the sourcemap according to the provided …\nIterates over all sections\nSets the debug id for the sourcemap (optional)\nSets the debug ID of the sourcemap.\nSets a new value for the debug id.\nSets the file for the sourcemap (optional)\nSets a new value for the file.\nSets a new value for the file.\nChanges the source name for an already set source.\nSets a new source value for an index.  This cannot add new …\nSets the source contents for an already existing source.\nSets source contents for a source.\nSets a new value for the source_root.\nSets a new value for the source_root.\nReplaces the embedded sourcemap\nUpdates the URL for this section.\nReturns the source.\nIterates over all source contents\nThe sourcemap this token is linked to.\nReturns the source map reference in the source view.\nIterates over all sources\nthe source line column (0-indexed)\nsource identifier\nthe source line number (0-indexed)\nStrips common prefixes from the sources in the builder\nOptionally strips common prefixes from the sources.  If an …\nEncode a sourcemap into a data url.\nConverts the token into a debug tuple in the form …\nWrites a sourcemap into a writer.\nWrites a decoded sourcemap to a writer.\nWrites a sourcemap index into a writer.\nWrites a sourcemap into a writer.\nReturns an iterator over the tokens.\nImplements utilities for dealing with the sourcemap vlq …\nIf enabled, names are kept in the rewritten sourcemap.\nIf enabled source contents are kept in the sourcemap.\nReturns embeded x-facebook-offset values.\nReturns embedded metro module paths.\nRefer to crate::SourceMap::adjust_mappings for more …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nEncodes a VLQ segment from a slice.\nParses a VLQ segment into a vector.")