searchState.loadedDescShard("swc", 0, "The main crate of the swc project.\nYou can create this type like <code>true.into()</code> or <code>false.into()</code>.\nAll methods accept Handler, which is a storage for errors.\nMulti-threaded implementation of Comments\nCodeMap\nColorConfig::Auto is the default, and it will print colors …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the value specified by the user or the default …\nCreates a new <code>BoolConfig</code> with the given value.\nThis method parses a javascript / typescript file\nThis method returns None if a file should be skipped.\nConverts ast node to source string and sourcemap.\nYou can use custom pass with this method.\n<code>custom_after_pass</code> is applied after swc transforms are …\nRuns <code>op</code> in current compiler’s context.\nDefaults to <code>false</code>.\nTry operation with a Handler and prints the errors as a …\nOne <code>BuiltConfig</code> per a directory with swcrc\nA single object in the <code>.swcrc</code> file\n<code>jsc.minify.format</code>.\nSecond argument of <code>minify</code>.\nParser options for <code>minify()</code>, which should have the same …\n<code>jsc</code> in  <code>.swcrc</code>.\n<code>jsc.experimental</code> in <code>.swcrc</code>\n<code>paths</code> section of <code>tsconfig.json</code>.\nA tuple represents a plugin.\n<code>.swcrc</code> file\nConfiguration related to source map generated by swc.\n<code>sourceMap</code> of <code>minify()</code>.`\nAdjust config for <code>file</code>.\nNot implemented yet.\nNot supported.\nNot implemented yet.\nNot implemented yet.\n<code>parse</code>: <code>(syntax, target, is_module)</code>\nLocation where swc may stores its intermediate cache. …\nNot implemented yet.\nEmit TypeScript definitions for <code>.ts</code>, <code>.tsx</code> files.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nIgnored, and always parsed.\nNot implemented yet.\nNot implemented yet.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThis method returns <code>Ok(None)</code> if the file should be ignored.\nIf true, keeps import assertions in the output.\nNot implemented yet.\nNot implemented yet.\nNot implemented yet.\nMinification for <strong>codegen</strong>. Minifier transforms will be …\nThis requires cargo feature <code>plugin</code>.\nNot implemented yet.\nNot implemented yet.\nNot implemented yet.\nNot implemented yet.\nNot implemented yet.\nNot implemented yet.\nIgnored, and always parsed.\nNot implemented yet.\nPossible values are: <code>&#39;inline&#39;</code>, <code>true</code>, <code>false</code>.\nNot supported.\n…\n…\nNot implemented yet.\nNot implemented yet.\nNot implemented yet.")