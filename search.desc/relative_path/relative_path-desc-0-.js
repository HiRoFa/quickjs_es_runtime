searchState.loadedDescShard("relative_path", 0, "  \nTrying to convert a platform-specific path which uses a …\nA single path component.\nIterator over all the components in a relative path.\nThe current directory <code>.</code>.\nHelper struct for printing relative paths.\nAn error raised when attempting to convert a path using …\nError kind for <code>FromPathError</code>.\nAn iterator over the <code>Component</code>s of a <code>RelativePath</code>, as <code>str</code> …\nNon-relative component in path.\nNon-utf8 component in path.\nA normal path component as a string.\nThe parent directory <code>..</code>.\nExtension methods for <code>Path</code> and <code>PathBuf</code> to for building and …\nA borrowed, immutable relative path.\nAn owned, mutable relative path.\nAn error raised when attempting to convert a path using …\nAn error returned from <code>strip_prefix</code> if the prefix was not …\nExtracts a slice corresponding to the portion of the path …\nCoerce to a <code>RelativePath</code> slice.\nYields the underlying <code>str</code> slice.\nExtracts the underlying <code>str</code> slice.\nIterate over all components in this relative path.\nReturns an object that implements <code>Display</code>.\nDetermines whether <code>child</code> is a suffix of <code>self</code>.\nExtracts the extension of <code>file_name</code>, if possible.\nReturns the final component of the <code>RelativePath</code>, if there …\nExtracts the stem (non-extension) portion of <code>file_name</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nTry to convert a <code>Path</code> to a <code>RelativePath</code> without allocating …\nTry to convert a <code>Path</code> to a <code>RelativePathBuf</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts this <code>RelativePathBuf</code> into a boxed <code>RelativePath</code>.\nConsumes the <code>RelativePathBuf</code>, yielding its internal <code>String</code> …\nDetermines whether <code>self</code> is normalized.\nProduces an iterator over the path’s components viewed …\nCreates an owned <code>RelativePathBuf</code> with path adjoined to …\nBuild an owned <code>RelativePathBuf</code>, joined with the given path …\nGets the underlying <code>FromPathErrorKind</code> that provides more …\nDirectly wraps a string slice as a <code>RelativePath</code> slice.\nCreate a new relative path buffer.\nReturn an owned <code>RelativePathBuf</code>, with all non-normal …\nReturns a relative path, without its final <code>Component</code> if …\nTruncates <code>self</code> to <code>parent</code>.\nExtends <code>self</code> with <code>path</code>.\nConstructs a relative path from the current path, to <code>path</code>.\nBuild a relative path from the provided directory to <code>self</code>.\nUpdates <code>extension</code> to <code>extension</code>.\nUpdates <code>file_name</code> to <code>file_name</code>.\nDetermines whether <code>base</code> is a prefix of <code>self</code>.\nReturns a relative path that, when joined onto <code>base</code>, …\nBuild an owned <code>PathBuf</code> relative to <code>base</code> for the current …\nBuild an owned <code>PathBuf</code> relative to <code>base</code> for the current …\nConvert to an owned <code>RelativePathBuf</code>.\nCreates an owned <code>RelativePathBuf</code> like <code>self</code> but with the …\nCreates an owned <code>RelativePathBuf</code> like <code>self</code> but with the …")