searchState.loadedDescShard("swc_common", 0, "Utilities for the swc project\nCommand line\nA trait for ast nodes.\nA byte offset. Keep this small (currently 32-bits), as AST …\nA character offset. Because of multibyte utf8 characters, …\nCustom sources for explicit parser calls from plugins and …\nDummy span, both position and length are zero, syntax …\nDerives <code>serde::Deserialize</code> which is aware of <code>tag</code> based …\nDerive with <code>#[derive(EqIgnoreSpan)]</code>.\nDerives <code>swc_common::EqIgnoreSpan</code>.\nDerives [<code>From</code>] for all variants. This only supports an …\nStorage for span hygiene data.\nUsed to create a <code>.map</code> file.\nA source code location used for error reporting.\nA source code location used as the result of …\nHack in src/libsyntax/parse.rs\nA macro. This includes the full name of the macro, so that …\nA mark is a unique id associated with a macro expansion.\nA collection of spans. Spans have two orthogonal …\ncall to <code>quote!</code>\nA single source in the SourceMap.\nSpans represent a region of code, used for error reporting.\nDerive\nDerives [<code>swc_common::Spanned</code>]. See [<code>swc_common::Spanned</code>] …\nA SyntaxContext represents a chain of macro expansions …\nDerive with <code>#[derive(TypeEq)]</code>.\nDerives <code>swc_common::TypeEq</code>.\nAlias for <code>#[derive(Spanned, Fold, Clone, Debug, PartialEq)]</code>…\nDerives <code>serde::Serialize</code> and <code>serde::Deserialize</code>.\nThe (0-based) column offset\nUTF-16 column in line, starting from 0.\nThe (0-based) column offset when displayed\nIndicates which crate this <code>SourceFile</code> was imported from.\nThe end position of this source in the <code>SourceMap</code>\nAlways returns true\nInformation about the original source\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nMachinery for hygienic macros, inspired by the <code>MTWT[1]</code> …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe (1-based) line number\nIndex of line, starting from 0.\nThe name of the file that the source came from. Source …\nA hash of the filename, used for speeding up the incr. …\nTrue if the <code>name</code> field above has been modified by …\nThis module reexports items from <code>swc_visit</code> with some …\nThe SourceMap tracks all the source code used within a …\nGet span of <code>self</code>.\nCreates a new single-byte span.\nThe complete source code\nThe source code’s hash\nThe start position of this source in the <code>SourceMap</code>\nThis module defines types which are thread safe if …\n<strong>Note</strong>: This method should return <code>true</code> for non-type values.\nAlways returns true\nThe unmapped path of the file that the source came from. …\nWrapper for OnceCell with support for [rkyv].\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nStores comment.\nImplementation of Comments which does not store any …\nSingle-threaded storage for comments.\nBorrows all the comments as (leading, trailing).\nBorrows all the comments as (leading, trailing).\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new <code>SingleThreadedComments</code> from the provided …\nThis method is used to check if a comment with the given …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTakes all the comments as (leading, trailing).\n[<code>Atom::new_bad</code>][] is perfectly fine for this value.\nRepresents a diagnostic message with its level, message, …\nUsed for emitting structured error messages and other …\nSignifies that the compiler died with an explicit call to …\nUsed as a return value to signify a fatal error occurred. …\nUsed for error reporting in transform.\nA handler deals with errors; certain errors (fatal, bug, …\nFor example a note attached to an error.\nSee the docs on <code>CodeSuggestion::substitutions</code>\nWhether or not the suggestion is approximate\nBuffers the diagnostic for later emission, unless handler …\nIf false, warning-level lints are suppressed. (rustc: see …\nCancel the diagnostic (a structured diagnostic must either …\nChild diagnostics that are related to this diagnostic\nA unique identifier for the diagnostic, which can be used …\nUsed by a lint. Copies over all details <em>but</em> the “main …\nDelay emission of this diagnostic as a bug.\nIf true, immediately emit diagnostics that would otherwise …\nEmit the diagnostic.\nshow macro backtraces even for non-local macros. (rustc: …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe level of the diagnostic (e.g., error, warning, help)\nThe message(s) associated with the diagnostic\n<code>true</code> if we haven’t taught a diagnostic with this code …\nConvenience function for internal use, clients should use …\nCreates a new <code>DiagnosticBuilder</code> with an already constructed\nConvenience function for internal use, clients should use …\nIf true, immediately print bugs registered with …\nResets the diagnostic error count as well as the cached …\nThe span of the source code where the diagnostic is located\nAdd a span/label to be included in the resulting snippet. …\nAdd a span/label to be included in the resulting snippet. …\nPrints out a message with a suggested edit of the code.\nPrints out a message with a suggested edit of the code. If …\nThis is a suggestion that may contain mistakes or fillers …\nPrints out a message with multiple suggested edits of the …\nReturns the assembled code suggestions and whether they …\nConvenience function for internal use, clients should use …\nConvenience function for internal use, clients should use …\nEach substitute can have multiple variants due to multiple …\nSuggestions for how to fix the issue identified by the …\nIf true, error-level diagnostics are upgraded to bug-level.\nExample implementation of Emitter is EmitterWriter\nCalls Self::with_emitter with EmitterWriter.\nEmitter trait for emitting errors.\nImplementation of Emitter which pretty-prints the errors.\nmaximum number of lines we will print for each error; …\nmaximum number of suggestions to be shown\nEmit a structured diagnostic.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if should show explanations about “rustc –explain…\nA mark is a unique id associated with a macro expansion.\nA SyntaxContext represents a chain of macro expansions …\nExtend a syntax context with a given mark and default …\nReturns the argument unchanged.\nReturns <code>true</code> if <code>self</code> is marked with <code>mark</code>.\nCalls <code>U::from(self)</code>.\nComputes a mark such that both input marks are descendants …\nShortcut for <code>Mark::fresh(Mark::root())</code>\nPulls a single mark off of the syntax context. This …\nThe mark of the theoretical expansion that generates …\nIn <code>op</code>, EqIgnoreSpan of [Ident] will ignore the syntax …\nImplementation of Input.\nSafety\nReturns None if it’s end of input <strong>or</strong> current character …\nTODO(kdy1): Remove this?\nImplementors can override the method to make it faster.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nImplementors can override the method to make it faster.\nImplementors can override the method to make it faster.\n<code>start</code> and <code>end</code> can be arbitrary value, but start should be …\nSafety\nSafety\nTakes items from stream, testing each one with predicate. …\nCopied from …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nVisit all children nodes. This converts <code>VisitAll</code> to <code>Visit</code>. …\nA named compiler pass.\nThe enum <code>Either</code> with variants <code>Left</code> and <code>Right</code> is a general …\nA value of type <code>L</code>.\nA visitor which visits node only if <code>enabled</code> is true.\nA visitor which applies <code>V</code> again and again if <code>V</code> modifies …\nTrait for a pass which is designed to invoked multiple …\nA value of type <code>R</code>.\nConvert <code>&amp;mut Either&lt;L, R&gt;</code> to <code>Either&lt;&amp;mut L, &amp;mut R&gt;</code>.\nConvert <code>Pin&lt;&amp;mut Either&lt;L, R&gt;&gt;</code> to …\nConvert <code>Pin&lt;&amp;Either&lt;L, R&gt;&gt;</code> to <code>Either&lt;Pin&lt;&amp;L&gt;, Pin&lt;&amp;R&gt;&gt;</code>, …\nConvert <code>&amp;Either&lt;L, R&gt;</code> to <code>Either&lt;&amp;L, &amp;R&gt;</code>.\nShould run again?\nMaps an <code>Either&lt;&amp;L, &amp;R&gt;</code> to an <code>Either&lt;L, R&gt;</code> by cloning the …\nMaps an <code>Either&lt;&amp;mut L, &amp;mut R&gt;</code> to an <code>Either&lt;L, R&gt;</code> by …\nMaps an <code>Either&lt;&amp;L, &amp;R&gt;</code> to an <code>Either&lt;L, R&gt;</code> by copying the …\nMaps an <code>Either&lt;&amp;mut L, &amp;mut R&gt;</code> to an <code>Either&lt;L, R&gt;</code> by …\nApply one of two functions depending on contents, unifying …\nConvert the contained value into <code>T</code>\nLike <code>either</code>, but provide some context to whichever of the …\nReturns the left value\nReturns the right value\nFactors out a homogenous type from an <code>Either</code> of <code>Result</code>.\nFactor out a homogeneous type from an either of pairs.\nConverts an <code>Either</code> of <code>Iterator</code>s to be an <code>Iterator</code> of <code>Either</code>…\nBorrows an <code>Either</code> of <code>Iterator</code>s to be an <code>Iterator</code> of <code>Either</code>s\nMutably borrows an <code>Either</code> of <code>Iterator</code>s to be an <code>Iterator</code> …\nFactors out <code>None</code> from an <code>Either</code> of <code>Option</code>.\nFactors out a homogenous type from an <code>Either</code> of <code>Result</code>.\nFactor out a homogeneous type from an either of pairs.\nConvert <code>Either&lt;L, R&gt;</code> to <code>Either&lt;R, L&gt;</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nExtract the value of an either over two equivalent types.\nConvert the inner value to an iterator.\nReturn true if the value is the <code>Left</code> variant.\nReturn true if the value is the <code>Right</code> variant.\nBorrow the inner value as an iterator.\nMutably borrow the inner value as an iterator.\nConvert the left side of <code>Either&lt;L, R&gt;</code> to an <code>Option&lt;L&gt;</code>.\nApply the function <code>f</code> on the value in the <code>Left</code> variant if …\nReturn left value or given value\nReturn left or a default\nReturns left value or computes it from a closure\nMap <code>f</code> over the contained value and return the result in the\nApply the functions <code>f</code> and <code>g</code> to the <code>Left</code> and <code>Right</code> variants …\nSimilar to <code>map_either</code>, with an added context <code>ctx</code> …\nApply the function <code>f</code> on the value in the <code>Left</code> variant if …\nApply the function <code>f</code> on the value in the <code>Right</code> variant if …\nname should follow hyphen-case.an implementation should …\nReset.\nConvert the right side of <code>Either&lt;L, R&gt;</code> to an <code>Option&lt;R&gt;</code>.\nApply the function <code>f</code> on the value in the <code>Right</code> variant if …\nReturn right value or given value\nReturn right or a default\nReturns right value or computes it from a closure\nReturns the left value\nReturns the right value\nSome utilities for generated visitors.\nCopied from <code>syntax::ptr::P</code> of rustc.\nTransform the inner value, consuming <code>self</code> and producing a …\nModifiers vector in-place.\nThis will be very slow if you try to extend vector using …\nMap in place.\nA serializable, wrapped struct for the diagnostics …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nHost side metadata context plugin may need to access. This …\nIndexable key to the metadata context for a transform …\nThe current working directory.\nThe current environment resolved as process.env.SWC_ENV || …\nThe path of the file being processed. This includes all of …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCommand line\nA byte offset. Keep this small (currently 32-bits), as AST …\nStores the state of the last conversion between BytePos …\nA character offset. Because of multibyte utf8 characters, …\nCustom sources for explicit parser calls from plugins and …\nDummy position. This is reserved for synthesized spans.\nDummy span, both position and length are zero, syntax …\nContains the error value\nA struct to represent lines of a source file.\nAn abstraction over the fs operations used by the Parser.\nStorage for span hygiene data.\nUsed to create a <code>.map</code> file.\nA source code location used for error reporting.\nA source code location used as the result of …\nHack in src/libsyntax/parse.rs\nA macro. This includes the full name of the macro, so that …\nA mark is a unique id associated with a macro expansion.\nIdentifies an offset of a multi-byte character in a …\nA collection of spans. Spans have two orthogonal …\nIdentifies an offset of a non-narrow character in a …\nContains the success value\nPlaceholders, commonly used where names are required, but …\nUsed for some special cases. e.g. mark the generated AST.\nReserved for PURE comments. e.g. <code>/* #__PURE__ */</code>\nPURE span, will emit <code>/* #__PURE__ */</code> comment in codegen.\nA struct to exchange <code>FileLines</code> with omitting SourceFile as …\nA struct to exchange <code>Loc</code> with omitting SourceFile as …\ncall to <code>quote!</code>\nA FileLoader that uses std::fs to load real files.\nSynthesized, but should be stored in a source map.\nA single source in the SourceMap.\nThe interner for spans.\nAn error type for looking up source maps.\nSpans represent a region of code, used for error reporting.\nA SyntaxContext represents a chain of macro expansions …\nRepresents a tab character, represented visually with a …\nRepresents a wide (fullwidth) character\nRepresents a zero-width character\nReturn an absolute path to a file, if possible.\nReturn a <code>Span</code> between the end of <code>self</code> to the beginning of …\nComputes the extra number of UTF-8 bytes necessary to …\nThe number of bytes, &gt;=2\nReturns `true`` if this is explicitly synthesized or has …\nClone the data from the current globals.\nThe (0-based) column offset\nUTF-16 column in line, starting from 0.\nThe (0-based) column offset when displayed\nReturn true if <code>self</code> fully encloses <code>other</code>.\nIndicates which crate this <code>SourceFile</code> was imported from.\nDummy span, both position are extremely large numbers so …\nYou can define whether to emit sourcemap with columns or …\nColumn in line where span ends, starting from 0, exclusive.\nReturns a new span representing just the end-point of this …\nThe end position of this source in the <code>SourceMap</code>\nInformation about the original source\nQuery the existence of a file.\nReturns\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nTake the span of a type parameter in a function signature …\nGet a line from the list of pre-computed line-beginnings. …\nMachinery for hygienic macros, inspired by the <code>MTWT[1]</code> …\nIf true, the file will be in the <code>ignoreList</code> of <code>SourceMap</code>.\nYou can override this to control <code>sourceContents</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if this is a dummy span with any hygienic …\nReturns <code>true</code> if this contains only a dummy primary span …\nReturns `true`` if this is synthesized and has no relevant …\nReturns <code>true</code> if this is a dummy span with any hygienic …\nCheck if the given byte position is within the given file. …\nIs this a primary span? This is the “locus” of the …\nWhat label should we attach to this span (if any)?\nThe (1-based) line number\nIndex of line, starting from 0.\nReturn the BytePos of the beginning of the current line.\nIndex of line, starting from 0.\nLocations of lines beginnings in the source code\nFor a global BytePos compute the local offset within the …\nLookup source information about a BytePos\nIf the relevant source_file is empty, we don’t return a …\nFind the line containing the given position. The return …\nApplies any path prefix substitution as defined by the …\nThis function is called to change the BytePos in AST into …\nReturns <code>Some(span)</code>, a union of the lhs and rhs span.  The …\nLocations of multi-byte characters in the source code\nThe name of the file that the source came from. Source …\nReturns identifier starting at <code>bpos</code>.\nA hash of the filename, used for speeding up the incr. …\nTrue if the <code>name</code> field above has been modified by …\n<code>src</code> should not have UTF8 BOM\nCreates a new source_file. This does not ensure that only …\nReturns a new span representing the next character after …\nWidth of characters that are not narrow in the source code\nReturns the absolute offset of the character in the …\nThe absolute offset of the character in the SourceMap\nSelects the first primary span (if any)\nReturns all primary spans.\nRead the contents of an UTF-8 file into memory.\nReplaces all occurrences of one Span with another. Used to …\nReturns a new span representing an empty span at the end …\nReturns a new span representing an empty span at the …\nBy default, we skip internal files.\nReturn true if the spans are equal with regards to the …\nThe span we are going to include in the final snippet.\nExtend the given <code>Span</code> to just after the next occurrence of …\nExtend the given <code>Span</code> to just after the next occurrence of …\nExtend the given <code>Span</code> to just after the previous …\nExtend the given <code>Span</code> to just after the previous …\nReturns the strings to highlight. We always ensure that …\nGiven a <code>Span</code>, get a shorter one until <code>predicate</code> yields …\nGiven a <code>Span</code>, try to get a shorter span ending just after …\nConverts a span of absolute BytePos to a CharPos relative …\nReturn the source snippet as <code>String</code> after the given <code>Span</code>\nReturn the source snippet as <code>String</code> before the given <code>Span</code>\nReturn the source snippet as <code>String</code> corresponding to the …\nGiven a <code>Span</code>, try to get a shorter span ending before the …\nGiven a <code>Span</code>, get a new <code>Span</code> covering the first token and …\nGiven a <code>Span</code>, get a new <code>Span</code> covering the first token …\nThe complete source code\nThe source code’s hash\nColumn in line where span begins, starting from 0.\nReturns a new span representing just the start-point of …\nThe start position of this source in the <code>SourceMap</code>\nReturns <code>self</code> if <code>self</code> is not the dummy span, and <code>other</code> …\nReturn a <code>Span</code> that would enclose both <code>self</code> and <code>end</code>.\nReturns <code>Some(span)</code>, where the start is trimmed by the end …\nFor a global BytePos compute the local offset within the …\nLookup source information about a BytePos\n<code>raw_pos</code> is the BytePos in the AST. It’s the raw value …\nThe unmapped path of the file that the source came from. …\nReturn a <code>Span</code> between the beginning of <code>self</code> to the …\nReturns the width of the character, 0 (zero-width) or 2 …\nCalls <code>op</code> with the source code located at <code>sp</code>.\nCalls the given closure with the source snippet after the …\nCalls the given closure with the source snippet before the …\nA mark is a unique id associated with a macro expansion.\nA SyntaxContext represents a chain of macro expansions …\nA value which is initialized on the first access.\nAn RAII implementation of a “scoped lock” of a mutex. …\nA thread-safe reference-counting pointer. ‘Arc’ stands …\nAn RAII mutex guard returned by <code>MutexGuard::map</code>, which can …\nAn RAII read lock guard returned by <code>RwLockReadGuard::map</code>, …\nAn RAII write lock guard returned by <code>RwLockWriteGuard::map</code>…\nA thread-safe cell which can be written to only once.\nRAII structure used to release the shared read access of a …\nTypes that can be transferred across thread boundaries.\nTypes for which it is safe to share references between …\nRAII structure used to release the exclusive write access …\nReturns a reference to the underlying allocator.\nProvides a raw pointer to the data.\nConverts to <code>Arc&lt;[T]&gt;</code>.\nConverts to <code>Arc&lt;T&gt;</code>.\nMakes a clone of the <code>Arc</code> pointer.\nComparison for two <code>Arc</code>s.\nDecrements the strong reference count on the <code>Arc&lt;T&gt;</code> …\nDecrements the strong reference count on the <code>Arc&lt;T&gt;</code> …\nCreates a new lazy value using <code>Default</code> as the initializing …\nCreates a <code>LockCell&lt;T&gt;</code>, with the <code>Default</code> value for T.\nCreates an empty <code>[T]</code> inside an Arc\nCreates a new <code>Arc&lt;T&gt;</code>, with the <code>Default</code> value for <code>T</code>.\nCreates an empty str inside an Arc\nCreates an empty CStr inside an Arc\nAttempts to downcast the <code>Arc&lt;dyn Any + Send + Sync&gt;</code> to a …\nDowncasts the <code>Arc&lt;dyn Any + Send + Sync&gt;</code> to a concrete …\nCreates a new <code>Weak</code> pointer to this allocation.\nDrops the <code>Arc</code>.\nEquality for two <code>Arc</code>s.\nForces the evaluation of this lazy value and returns a …\nForces the evaluation of this lazy value and returns a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts a <code>CString</code> into an Arc&lt;CStr&gt; by moving the <code>CString</code> …\nMove a boxed object to a new, reference-counted allocation.\nAllocates a reference-counted <code>str</code> and copies <code>v</code> into it.\nConverts an atomically reference-counted string slice into …\nAllocates a reference-counted <code>str</code> and copies <code>v</code> into it.\nAllocates a reference-counted <code>str</code> and copies <code>v</code> into it.\nAllocates a reference-counted slice and fills it by …\nConverts an <code>OsString</code> into an Arc&lt;OsStr&gt; by moving the …\nCopies the string into a newly allocated Arc&lt;OsStr&gt;.\nCopies the string into a newly allocated Arc&lt;OsStr&gt;.\nConverts a <code>PathBuf</code> into an Arc&lt;Path&gt; by moving the <code>PathBuf</code> …\nConverts a <code>Path</code> into an <code>Arc</code> by copying the <code>Path</code> data into …\nAllocates a reference-counted slice and moves <code>v</code>’s items …\nAllocates a reference-counted slice and fills it by …\nConverts a <code>[T; N]</code> into an <code>Arc&lt;[T]&gt;</code>.\nConverts a <code>T</code> into an <code>Arc&lt;T&gt;</code>\nReturns the argument unchanged.\nCreates an atomically reference-counted pointer from a …\nConverts a <code>&amp;mut CStr</code> into a <code>Arc&lt;CStr&gt;</code>, by copying the …\nConverts a <code>&amp;CStr</code> into a <code>Arc&lt;CStr&gt;</code>, by copying the contents …\nConverts a <code>Path</code> into an <code>Arc</code> by copying the <code>Path</code> data into …\nTakes each element in the <code>Iterator</code> and collects it into an …\nConstructs an <code>Arc&lt;T&gt;</code> from a raw pointer.\nConstructs an <code>Arc&lt;T, A&gt;</code> from a raw pointer.\n‘Greater than or equal to’ comparison for two <code>Arc</code>s.\nGets the reference to the underlying value.\nGets the reference to the result of this lazy value if it …\nGets the mutable reference to the underlying value.\nGets the reference to the result of this lazy value if it …\nReturns a mutable reference into the given <code>Arc</code>, if there …\nReturns a mutable reference into the given <code>Arc</code>, without …\nGets the contents of the cell, initializing it with <code>f</code> if …\nGets the contents of the cell, initializing it with <code>f</code> if …\nGet the reference to the underlying value, without …\nGreater-than comparison for two <code>Arc</code>s.\nIncrements the strong reference count on the <code>Arc&lt;T&gt;</code> …\nIncrements the strong reference count on the <code>Arc&lt;T&gt;</code> …\nSame as HashMap::insert, but it may panic if there’s …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts the reference-counted slice into a …\nConsumes the <code>OnceCell</code>, returning the wrapped value. Returns\nReturns the inner value, if the <code>Arc</code> has exactly one strong …\nConsumes the <code>Arc</code>, returning the wrapped pointer.\nConsumes the <code>Arc</code>, returning the wrapped pointer and …\nConsumes this <code>Lazy</code> returning the stored value.\nDetermine whether this is the unique reference to the …\n‘Less than or equal to’ comparison for two <code>Arc</code>s.\nLess-than comparison for two <code>Arc</code>s.\nMakes a mutable reference into the given <code>Arc</code>.\nInequality for two <code>Arc</code>s.\nCreates a new empty cell.\nCreates a new lazy value with the given initializing …\nConstructs a new <code>Arc&lt;T&gt;</code>.\nConstructs a new <code>Arc&lt;T&gt;</code> while giving you a <code>Weak&lt;T&gt;</code> to the …\nConstructs a new <code>Arc&lt;T, A&gt;</code> in the given allocator while …\nConstructs a new <code>Arc&lt;T&gt;</code> in the provided allocator.\nConstructs a new <code>Arc</code> with uninitialized contents.\nConstructs a new <code>Arc</code> with uninitialized contents in the …\nConstructs a new atomically reference-counted slice with …\nConstructs a new atomically reference-counted slice with …\nConstructs a new <code>Arc</code> with uninitialized contents, with the …\nConstructs a new <code>Arc</code> with uninitialized contents, with the …\nConstructs a new atomically reference-counted slice with …\nConstructs a new atomically reference-counted slice with …\nPartial comparison for two <code>Arc</code>s.\nConstructs a new <code>Pin&lt;Arc&lt;T&gt;&gt;</code>. If <code>T</code> does not implement <code>Unpin</code>…\nConstructs a new <code>Pin&lt;Arc&lt;T, A&gt;&gt;</code> in the provided allocator. …\nReturns <code>true</code> if the two <code>Arc</code>s point to the same allocation …\nSets the contents of this cell to <code>value</code>.\nGets the number of strong (<code>Arc</code>) pointers to this …\nTakes the value out of this <code>OnceCell</code>, moving it back to an …\nLike <code>set</code>, but also returns a reference to the final cell …\nConstructs a new <code>Arc&lt;T&gt;</code>, returning an error if allocation …\nConstructs a new <code>Arc&lt;T, A&gt;</code> in the provided allocator, …\nConstructs a new <code>Arc</code> with uninitialized contents, …\nConstructs a new <code>Arc</code> with uninitialized contents, in the …\nConstructs a new <code>Arc</code> with uninitialized contents, with the …\nConstructs a new <code>Arc</code> with uninitialized contents, with the …\nConstructs a new <code>Pin&lt;Arc&lt;T&gt;&gt;</code>, return an error if …\nConstructs a new <code>Pin&lt;Arc&lt;T, A&gt;&gt;</code> in the provided allocator, …\nReturns the inner value, if the <code>Arc</code> has exactly one strong …\nIf we have the only reference to <code>T</code> then unwrap it. …\nGets the reference to the underlying value, blocking the …\nGets the number of <code>Weak</code> pointers to this allocation.\nCreates a new initialized cell.\nCopied from https://stackoverflow.com/a/49456265/6193633\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nMoved Copied from <code>syntax::ptr::P</code> of rustc.\nTransform the inner value, consuming <code>self</code> and producing a …\nModifiers vector in-place.\nThis will be very slow if you try to extend vector using …\nMap in place.\nHelper for people who are working on <code>VisitMut</code>.\nCreate a dummy value of this type.\nMutate <code>self</code> using <code>op</code>, which accepts owned data.")