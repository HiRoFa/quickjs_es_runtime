searchState.loadedDescShard("miette", 0, "You run miette? You run her code like the software? Oh. …\nJust some help. Here’s how you could be doing it better.\nUse RGB colors even if the terminal does not support them\n“Raw” type for the byte offset from the beginning of a …\nCompatibility re-export of <code>WrapErr</code> for interop with <code>anyhow</code> …\n<code>ReportHandler</code> that renders plain text and avoids …\nAdds rich metadata to your Error that can be used by <code>Report</code>…\nContains the error value\nCompatibility re-export of <code>Report</code> for interop with <code>anyhow</code> …\nCritical failure. The program cannot continue. This is the …\nA <code>ReportHandler</code> that displays a given <code>Report</code> in a …\nTheme used by <code>GraphicalReportHandler</code> to render fancy …\nError indicating that <code>set_hook()</code> was unable to install the …\nConvenience trait that adds a <code>.into_diagnostic()</code> method …\nWrapper around <code>std::io::Error</code>. This is returned when …\n<code>ReportHandler</code> that renders JSON output. It’s a …\nA labeled <code>SourceSpan</code>.\nDiagnostic that can be created at runtime.\nError enum for miette. Used by certain operations in the …\nA <code>ReportHandler</code> that displays a given <code>Report</code> in a …\nCreate a custom <code>MietteHandler</code> from options.\nBasic implementation of the <code>SpanContents</code> trait, for …\nUtility struct for when you have a regular <code>SourceCode</code> type …\n<code>ReportHandler</code> that renders plain text and avoids …\nAlways use ANSI, regardless of terminal support for RGB\nContains the success value\nReturned when a <code>SourceSpan</code> extends beyond the bounds of a …\nUse RGB colors instead of ANSI if the terminal supports RGB\nCore Diagnostic wrapper type.\nError Report Handler trait for customizing <code>miette::Report</code>\ntype alias for <code>Result&lt;T, Report&gt;</code>\nSettings to control the color format used for graphical …\n<code>Diagnostic</code> severity. Intended to be used by <code>ReportHandler</code>s …\nRepresents readable source code of some sort.\nNewtype that represents the <code>ByteOffset</code> from the beginning …\nSpan within a <code>SourceCode</code>\nContents of a <code>SourceCode</code> covered by <code>SourceSpan</code>.\nCharacters to be used when drawing when using …\nStyles for various parts of graphical rendering for the …\nWarning. Please take note.\nProvides the <code>wrap_err()</code> method for <code>Result</code>.\nStyle to apply to things highlighted as “advice”.\nReturn new diagnostic with new label added to the existing …\nReturn new diagnostic with new labels added to the …\nANSI color-based styles.\nASCII-art-based graphical drawing, with ANSI styling.\nASCII-art-based graphical elements. Works well on older …\nMakes a new label at specified span\nMakes a new label that points at a specific offset.\nReturn early with an error.\nIf true, long words can be broken when wrapping.\nBuilds a <code>MietteHandler</code> from this builder.\nAn iterator of the chain of source errors contained by …\nCharacters to be used for drawing.\nUnique diagnostic code that can be used to look up more …\nUnique diagnostic code that can be used to look up more …\nUnique diagnostic code to look up more information about …\nIf true, colors will be used during graphical rendering, …\nThe 0-indexed column in the associated <code>SourceCode</code> where …\nCompatibility re-export of <code>wrap_err()</code> for interop with …\nCompatibility re-export of <code>wrap_err()</code> for interop with …\nCompatibility re-export of <code>wrap_err</code> for interop with <code>anyhow</code>\nSets the number of context lines before and after a span …\nReference to the data inside the associated span, in bytes.\nDefine the report format\nConstruct a <code>MietteDiagnostic</code> in more user-friendly way.\nThe cause of the error.\nThe cause of the error.\nOverride for the <code>Display</code> format\nOverride for the <code>Display</code> format\nAttempt to downcast the error object to a concrete type.\nDowncast this error object by mutable reference.\nDowncast this error object by reference.\nEmoji-heavy unicode characters.\nReturn early with an error if a condition is not satisfied.\nStyle to apply to things highlighted as “error”.\nSet a footer to be displayed at the bottom of the report.\nIf true, graphical rendering will be used regardless of …\nIf true, forces use of the narrated renderer.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nPanics\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns an offset for the <em>file</em> location of wherever this …\nConstruct a <code>Report</code> directly from an error-like type\nLittle utility to help convert 1-based line/column …\nSet a graphical theme for the handler when rendering in …\nGet a reference to the Handler for this Report.\nGet a mutable reference to the Handler for this Report.\nAdditional help text related to this <code>Diagnostic</code>. Do you …\nAdditional help text related to this <code>Diagnostic</code>. Do you …\nStyle to apply to the help text.\nAdditional help text related to this Diagnostic\nThis module provides a trait for creating custom syntax …\nStyles to cycle through (using <code>.iter().cycle()</code>), to render …\nReturns a reference the inner <code>SourceCode</code> type for this …\nReturns a reference to the inner <code>SourceSpan</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts <code>Result</code> types that return regular <code>std::error::Error</code>…\nReturns true if <code>E</code> is the type held by this error object.\nTrue if this <code>LabeledSpan</code> is empty.\nWhether this <code>SourceSpan</code> has a length of zero. It may still …\nGets the (optional) label string for this <code>LabeledSpan</code>.\nLabels to apply to this <code>Diagnostic</code>’s …\nLabels to apply to this <code>Diagnostic</code>’s …\nLabels to apply to this <code>Diagnostic</code>’s …\nOptional method. The language name for this source code, …\nOptional method. The language name for this source code, …\nReturns the number of bytes this <code>LabeledSpan</code> spans.\nTotal length of the <code>SourceSpan</code>, in bytes.\nThe 0-indexed line in the associated <code>SourceCode</code> where the …\nTotal number of lines covered by this <code>SpanContents</code>.\nStyle to apply to filenames/links/URLs.\nStyle to apply to line numbers.\nDisplayed diagnostic message\nConstruct an ad-hoc <code>Report</code>.\nCreate a new error object from a printable error message.\nAn optional (file?) name for the container of this …\nAn optional (file?) name for the container of this …\nGets the name of this <code>NamedSource</code>.\nCreate a new error object from any error type.\nCreates a new <code>MietteHandler</code> with default settings.\nCreate a new <code>MietteHandlerOpts</code>.\nCreate a new <code>NarratableReportHandler</code> There are no …\nCreate a new <code>GraphicalReportHandler</code> with the default …\nCreate a new <code>JSONReportHandler</code>. There are no customization …\nCreate a new <code>NarratableReportHandler</code>. There are no …\nCreate a new dynamic diagnostic with the given message.\nCreate a new <code>NamedSource</code> using a regular <code>SourceCode</code> and …\nMakes a new labeled span.\nMake a new <code>MietteSpanContents</code> object.\nCreate a new <code>SourceSpan</code>.\nCreate a new error object from a boxed <code>Diagnostic</code>.\nMake a new <code>MietteSpanContents</code> object, with a name for its …\nMakes a new labeled primary span using an existing span.\nCreate a new <code>GraphicalReportHandler</code> with a given …\nMakes a new labeled span using an existing span.\nA “basic” graphical theme that skips colors and …\nNo styling. Just regular ol’ monochrome.\nReturns the 0-based starting byte offset.\nThe absolute offset, in bytes, from the beginning of a …\nActual byte offset.\nTrue if this <code>LabeledSpan</code> is a primary span.\nRead the bytes for a specific span from this <code>SourceCode</code>, …\nAdditional related <code>Diagnostic</code>s.\nAdditional related <code>Diagnostic</code>s.\nRender a <code>Diagnostic</code>. This function is mostly internal and …\nRender a <code>Diagnostic</code>. This function is mostly internal and …\nRender a <code>Diagnostic</code>. This function is mostly internal and …\nRender a <code>Diagnostic</code>. This function is mostly internal and …\nNice RGB colors. Credit.\nControls which color format to use if colors are used in …\nThe lowest level cause of this error — this error’s …\nSet the error hook.\nChange the text of the label\nDiagnostic severity. This may be used by <code>ReportHandler</code>s to …\nDiagnostic severity. This may be used by <code>ReportHandler</code>s to …\n<code>Diagnostic</code> severity. Intended to be used by <code>ReportHandler</code>s …\nShow related errors as nested errors.\nShow related errors as siblings.\nSource code to apply this <code>Diagnostic</code>’s <code>Diagnostic::labels</code>…\nSource code to apply this <code>Diagnostic</code>’s <code>Diagnostic::labels</code>…\n<code>SourceSpan</code> representing the span covered by this …\nStyles to be used for painting.\nSet the displayed tab width in spaces.\nSet the displayed tab width in spaces.\nIf true, specify whether the graphical handler will make …\nStore the location of the caller who constructed this …\nStore the location of the caller who constructed this …\nMakes a new label without text, that underlines a specific …\nIf true, forces unicode display for graphical output. If …\nGraphical theme that draws using both ansi colors and …\nFancy unicode-based graphical elements.\nGraphical theme that draws in monochrome, while still …\nURL to visit for a more detailed explanation/help about …\nURL to visit for a more detailed explanation/help about …\nURL to visit for a more detailed explanation/help about …\nStyle to apply to things highlighted as “warning”.\nSets the width to wrap the report at. Defaults to 80.\nEnables or disables breaking of words during wrapping.\nInclude the cause chain of the top-level error in the …\nInclude the cause chain of the top-level error in the …\nInclude the cause chain of the top-level error in the …\nReturn new diagnostic with the given code.\nCompatibility re-export of <code>wrap_err_with()</code> for interop …\nCompatibility re-export of <code>wrap_err_with()</code> for interop …\nSets the number of lines of context to show around each …\nSets the number of lines of context to show around each …\nSets the ‘global’ footer for this handler.\nSet the footer to be displayed at the end of the report.\nReturn new diagnostic with the given help message.\nReturn new diagnostic with the given label.\nReturn new diagnostic with the given labels.\nSets the <code>language</code> for this source code.\nSets the <code>language</code> for syntax highlighting.\nSets the display text for links. Miette displays <code>(link)</code> if …\nWhether to enable error code linkification using …\nInclude the line and column for the the start of the …\nReturn new diagnostic with the given severity.\nSets whether to render related errors as nested errors.\nProvide source code for this error\nSet a syntax highlighter when rendering in graphical mode. …\nEnable syntax highlighting for source code snippets, using …\nSet a theme for this handler.\nReturn new diagnostic with the given URL.\nWhether to include <code>Diagnostic::url()</code> in the output.\nSets the width to wrap the report at.\nSets the word separator to use when wrapping.\nSets the word splitter to use when wrapping.\nEnables or disables wrapping of lines to fit the width.\nDo not include the cause chain of the top-level error in …\nDo not include the cause chain of the top-level error in …\nDo not include the cause chain of the top-level error in …\nDo not include the line and column for the the start of …\nDisables syntax highlighting when rendering in graphical …\nDisable syntax highlighting. This uses the …\nSets the <code>textwrap::WordSeparator</code> to use when determining …\nSets the <code>textwrap::WordSplitter</code> to use when determining …\nWrap the error value with a new adhoc error\nWrap the error value with a new adhoc error\nCreate a new error from an error message to wrap the …\nWrap the error value with a new adhoc error that is …\nWrap the error value with a new adhoc error that is …\nIf true, long lines can be wrapped.\nThe default syntax highlighter. It applies <code>Style::default()</code>…\nThe default highlighter state. It applies <code>Style::default()</code> …\nA syntax highlighter for highlighting miette <code>SourceCode</code> …\nA stateful highlighter that incrementally highlights lines …\nReturns the argument unchanged.\nReturns the argument unchanged.\nHighlight an individual line from the source code by …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new <code>HighlighterState</code> to begin parsing and …")