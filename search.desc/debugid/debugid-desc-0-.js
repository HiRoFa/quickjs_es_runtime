searchState.loadedDescShard("debugid", 0, "This crate provides types for identifiers of object files, …\nWrapper around <code>DebugId</code> for Breakpad formatting.\nUnique platform-dependent identifier of code files.\nUnique identifier for debug information files and their …\nIndicates an error parsing a <code>CodeId</code>.\nIndicates an error parsing a <code>DebugId</code>.\nReturns the appendix part of the code module’s debug …\nReturns the string representation of this code identifier.\nReturns a wrapper which when formatted via <code>fmt::Display</code> …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstructs a <code>CodeId</code> from a binary slice.\nParses a breakpad identifier from a string.\nConstructs a <code>DebugId</code> from a Microsoft little-endian GUID …\nConstructs a <code>DebugId</code> from its <code>uuid</code> and <code>appendix</code> parts.\nConstructs a <code>DebugId</code> from a PDB 2.0 timestamp and age.\nConstructs a <code>DebugId</code> from its <code>uuid</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns whether this identifier is nil, i.e. it consists …\nReturns whether this identifier is nil, i.e. it is empty.\nReturns whether this identifier is from the PDB 2.0 format.\nConstructs a <code>CodeId</code> from its string representation.\nConstructs an empty debug identifier, containing only …\nConstructs an empty code identifier.\nReturns the UUID part of the code module’s …")