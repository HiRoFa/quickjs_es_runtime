searchState.loadedDescShard("hirofa_utils", 0, "AutoIdMap is a wrapper around HashMap which automatically …\ncheck if a map contains a certain id\nReturns the argument unchanged.\nget an element based on it’s id\nget an element based on it’s id\ninsert an element and return the new id\nCalls <code>U::from(self)</code>.\nsee if map is empty\nget the size of the map\ncreate a new instance of the AutoIdMap\nremove an element based on its id\nremove an element based on its id\nreplace an element, this will panic if you pass an id that …\ninsert an element and return the new id\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nthe EventLoop struct is a single thread event queue\nadd a task to the EventLoop\nadd an async block to the EventLoop #Example\nadd a Future to the pool, for when you don’t need the …\nadd an interval (repeated task) to the EventLoop\nadd a future to the EventLoop from within a running task\nadd a future to the EventLoop from within a running task\nadd a task to the EventLoop from within a running task\nadd a timeout (delayed task) to the EventLoop\nadd a task to the pool\ncancel a previously added interval\ncancel a previously added timeout\nexecute a task in the EventLoop and block until it …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\ninternal method to ensure a member is called from the …\ninternal method to ensure a member is called from the …\ninit a new EventLoop\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nstart an async task\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.")