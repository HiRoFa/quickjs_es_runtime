searchState.loadedDescShard("swc_ecma_transforms_base", 0, "See Ident for know how does swc manages identifiers.\nAlternative for https://babeljs.io/docs/en/assumptions\nhttps://babeljs.io/docs/en/assumptions#arraylikeisiterable\nhttps://babeljs.io/docs/en/assumptions#constantreexports\nhttps://babeljs.io/docs/en/assumptions#constantsuper\nhttps://babeljs.io/docs/en/assumptions#enumerablemodulemeta\nReturns the argument unchanged.\nhttps://babeljs.io/docs/en/assumptions#ignorefunctionlength\n…\nCalls <code>U::from(self)</code>.\nhttps://babeljs.io/docs/en/assumptions#iterableisarray\n…\nhttps://babeljs.io/docs/en/assumptions#noclasscalls\nhttps://babeljs.io/docs/en/assumptions#nodocumentall\n…\nhttps://babeljs.io/docs/en/assumptions#nonewarrows\nhttps://babeljs.io/docs/en/assumptions#objectrestnosymbols\n…\nhttps://babeljs.io/docs/en/assumptions#puregetters\nhttps://babeljs.io/docs/en/assumptions#setclassmethods\n…\nhttps://babeljs.io/docs/en/assumptions#setpublicclassfields\nhttps://babeljs.io/docs/en/assumptions#setspreadproperties\n…\n…\nFixes ast nodes before printing so semantics are preserved.\nThis variable is used to manage helper scripts like …\nTracks used helper methods. (e.g. __extends)\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nSee hygiene_with_config for doc. Creates a <code>hygiene</code> pass …\nThe pass actually modifies the identifiers in the way that …\nMangle even if vars are visible to <code>eval</code> or <code>with</code>.\nCalls <code>U::from(self)</code>.\nIf true, the <code>hygiene</code> pass will preserve class names.\nThe marks derived from this marks will treated as …\nThis is considered as a private type and it’s NOT A …\nInvoked after visiting all ModuleItems, possibly in …\nInvoked after visiting each statements.\nInvoked after visiting each statements.\nInvoked after visiting all Stmts, possibly in parallel.\nUsed to create visitor.\nInvoke <code>op</code> in parallel, if <code>swc_ecma_utils</code> is compiled with …\nInvoke <code>op</code> in parallel, if <code>swc_ecma_utils</code> is compiled with …\nIf you don’t have a special reason, use …\nThis can be called in anytime.\nIt should be true if you expect lots of collisions\nShould reset <code>n</code> to 0 for each identifier?\nA trait that is used to represent a renamed variable. For …\nSee the <code>RenamedVariable</code> documentation, this type …\nShould increment <code>n</code>.\nPotentially create a new private variable, depending on …\nReturn true if the identifier should be preserved.\nCreate correct (unique) syntax contexts. Use this if you …\ndon’t actually get stored\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")